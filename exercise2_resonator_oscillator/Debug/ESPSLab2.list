
ESPSLab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004148  08004148  00005148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004330  08004330  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004330  08004330  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004334  08004334  00005334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004338  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  08004348  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004348  000060a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4b6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f13  00000000  00000000  000134f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00015410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a76  00000000  00000000  000161a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ae7  00000000  00000000  00016c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9c9  00000000  00000000  0003c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7dc2  00000000  00000000  0004a0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d34  00000000  00000000  00141ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00145c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004130 	.word	0x08004130

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004130 	.word	0x08004130

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2f>:
 8000944:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800094c:	bf24      	itt	cs
 800094e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000956:	d90d      	bls.n	8000974 <__aeabi_d2f+0x30>
 8000958:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800095c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000964:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800096c:	bf08      	it	eq
 800096e:	f020 0001 	biceq.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000978:	d121      	bne.n	80009be <__aeabi_d2f+0x7a>
 800097a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800097e:	bfbc      	itt	lt
 8000980:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000984:	4770      	bxlt	lr
 8000986:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800098a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800098e:	f1c2 0218 	rsb	r2, r2, #24
 8000992:	f1c2 0c20 	rsb	ip, r2, #32
 8000996:	fa10 f30c 	lsls.w	r3, r0, ip
 800099a:	fa20 f002 	lsr.w	r0, r0, r2
 800099e:	bf18      	it	ne
 80009a0:	f040 0001 	orrne.w	r0, r0, #1
 80009a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b0:	ea40 000c 	orr.w	r0, r0, ip
 80009b4:	fa23 f302 	lsr.w	r3, r3, r2
 80009b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009bc:	e7cc      	b.n	8000958 <__aeabi_d2f+0x14>
 80009be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009c2:	d107      	bne.n	80009d4 <__aeabi_d2f+0x90>
 80009c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c8:	bf1e      	ittt	ne
 80009ca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009d2:	4770      	bxne	lr
 80009d4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <oscillator>:
	y[1] = y[0];

	return y[0];
}

float oscillator() {
 80009e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
    static float y[3] = {0};
    static int started = 0;
    float x;

    // Set impulse only once
    if (!started) {
 80009ec:	4b3b      	ldr	r3, [pc, #236]	@ (8000adc <oscillator+0xf8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <oscillator+0x1c>
        x = 2042.0f;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae0 <oscillator+0xfc>)
 80009f6:	607b      	str	r3, [r7, #4]
        started = 1;
 80009f8:	4b38      	ldr	r3, [pc, #224]	@ (8000adc <oscillator+0xf8>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e002      	b.n	8000a06 <oscillator+0x22>
    } else {
        x = 0.0f;
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
    }

    // Resonator filter equation
    y[0] = 2.0f * cos(w0) * y[1] - y[2] + sin(w0) * x;
 8000a06:	4b37      	ldr	r3, [pc, #220]	@ (8000ae4 <oscillator+0x100>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fe92 	bl	8000734 <__aeabi_f2d>
 8000a10:	4602      	mov	r2, r0
 8000a12:	460b      	mov	r3, r1
 8000a14:	ec43 2b10 	vmov	d0, r2, r3
 8000a18:	f002 fb12 	bl	8003040 <cos>
 8000a1c:	ec51 0b10 	vmov	r0, r1, d0
 8000a20:	4602      	mov	r2, r0
 8000a22:	460b      	mov	r3, r1
 8000a24:	f7ff fd28 	bl	8000478 <__adddf3>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4614      	mov	r4, r2
 8000a2e:	461d      	mov	r5, r3
 8000a30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <oscillator+0x104>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fe7d 	bl	8000734 <__aeabi_f2d>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4620      	mov	r0, r4
 8000a40:	4629      	mov	r1, r5
 8000a42:	f7ff fbe9 	bl	8000218 <__aeabi_dmul>
 8000a46:	4602      	mov	r2, r0
 8000a48:	460b      	mov	r3, r1
 8000a4a:	4614      	mov	r4, r2
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <oscillator+0x104>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe6e 	bl	8000734 <__aeabi_f2d>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f7ff fd08 	bl	8000474 <__aeabi_dsub>
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	4614      	mov	r4, r2
 8000a6a:	461d      	mov	r5, r3
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <oscillator+0x100>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe5f 	bl	8000734 <__aeabi_f2d>
 8000a76:	4602      	mov	r2, r0
 8000a78:	460b      	mov	r3, r1
 8000a7a:	ec43 2b10 	vmov	d0, r2, r3
 8000a7e:	f002 fb33 	bl	80030e8 <sin>
 8000a82:	ec59 8b10 	vmov	r8, r9, d0
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fe54 	bl	8000734 <__aeabi_f2d>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	460b      	mov	r3, r1
 8000a90:	4640      	mov	r0, r8
 8000a92:	4649      	mov	r1, r9
 8000a94:	f7ff fbc0 	bl	8000218 <__aeabi_dmul>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	f7ff fcea 	bl	8000478 <__adddf3>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f7ff ff4a 	bl	8000944 <__aeabi_d2f>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <oscillator+0x104>)
 8000ab4:	6013      	str	r3, [r2, #0]

    // Update delay lines
    y[2] = y[1];
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <oscillator+0x104>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <oscillator+0x104>)
 8000abc:	6093      	str	r3, [r2, #8]
    y[1] = y[0];
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <oscillator+0x104>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <oscillator+0x104>)
 8000ac4:	6053      	str	r3, [r2, #4]

    return y[0];
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <oscillator+0x104>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	ee07 3a90 	vmov	s15, r3
}
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ada:	bf00      	nop
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	44ff4000 	.word	0x44ff4000
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000094 	.word	0x20000094

08000aec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000af0:	f000 faa7 	bl	8001042 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000af4:	f000 f818 	bl	8000b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000af8:	f000 f8dc 	bl	8000cb4 <MX_GPIO_Init>
	MX_TIM6_Init();
 8000afc:	f000 f8a4 	bl	8000c48 <MX_TIM6_Init>
	MX_DAC1_Init();
 8000b00:	f000 f85e 	bl	8000bc0 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim6); // Start TIM 6 with interrupts
 8000b04:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <main+0x34>)
 8000b06:	f001 fee3 	bl	80028d0 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Enable channel 1
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <main+0x38>)
 8000b0e:	f000 fc3b 	bl	8001388 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Enable channel 2
 8000b12:	2110      	movs	r1, #16
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <main+0x38>)
 8000b16:	f000 fc37 	bl	8001388 <HAL_DAC_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000b1a:	bf00      	nop
 8000b1c:	e7fd      	b.n	8000b1a <main+0x2e>
 8000b1e:	bf00      	nop
 8000b20:	20000044 	.word	0x20000044
 8000b24:	20000030 	.word	0x20000030

08000b28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	@ 0x50
 8000b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2238      	movs	r2, #56	@ 0x38
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fa54 	bl	8002fe4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f001 f8b2 	bl	8001cb4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2340      	movs	r3, #64	@ 0x40
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b66:	2304      	movs	r3, #4
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b6a:	2355      	movs	r3, #85	@ 0x55
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f94c 	bl	8001e1c <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x66>
		Error_Handler();
 8000b8a:	f000 f913 	bl	8000db4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fc4a 	bl	8002440 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x8e>
		Error_Handler();
 8000bb2:	f000 f8ff 	bl	8000db4 <Error_Handler>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2230      	movs	r2, #48	@ 0x30
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fa09 	bl	8002fe4 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_DAC1_Init+0x80>)
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <MX_DAC1_Init+0x84>)
 8000bd6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000bd8:	4819      	ldr	r0, [pc, #100]	@ (8000c40 <MX_DAC1_Init+0x80>)
 8000bda:	f000 fbb2 	bl	8001342 <HAL_DAC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_DAC1_Init+0x28>
		Error_Handler();
 8000be4:	f000 f8e6 	bl	8000db4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000be8:	2302      	movs	r3, #2
 8000bea:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000c04:	2304      	movs	r3, #4
 8000c06:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <MX_DAC1_Init+0x80>)
 8000c14:	f000 fcb2 	bl	800157c <HAL_DAC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DAC1_Init+0x62>
		Error_Handler();
 8000c1e:	f000 f8c9 	bl	8000db4 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000c22:	463b      	mov	r3, r7
 8000c24:	2210      	movs	r2, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_DAC1_Init+0x80>)
 8000c2a:	f000 fca7 	bl	800157c <HAL_DAC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DAC1_Init+0x78>
		Error_Handler();
 8000c34:	f000 f8be 	bl	8000db4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	@ 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000030 	.word	0x20000030
 8000c44:	50000800 	.word	0x50000800

08000c48 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <MX_TIM6_Init+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 170 - 1;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c60:	22a9      	movs	r2, #169	@ 0xa9
 8000c62:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 20;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c78:	f001 fdd2 	bl	8002820 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8000c82:	f000 f897 	bl	8000db4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	@ (8000cac <MX_TIM6_Init+0x64>)
 8000c94:	f002 f8ca 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8000c9e:	f000 f889 	bl	8000db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000044 	.word	0x20000044
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b38      	ldr	r3, [pc, #224]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a37      	ldr	r2, [pc, #220]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_GPIO_Init+0xf8>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2140      	movs	r1, #64	@ 0x40
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d32:	f000 ff69 	bl	8001c08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4818      	ldr	r0, [pc, #96]	@ (8000db0 <MX_GPIO_Init+0xfc>)
 8000d4e:	f000 fdd9 	bl	8001904 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d62:	230c      	movs	r3, #12
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f000 fdc8 	bl	8001904 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d74:	2340      	movs	r3, #64	@ 0x40
 8000d76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f000 fdb9 	bl	8001904 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2028      	movs	r0, #40	@ 0x28
 8000d98:	f000 fa9f 	bl	80012da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d9c:	2028      	movs	r0, #40	@ 0x28
 8000d9e:	f000 fab6 	bl	800130e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000800 	.word	0x48000800

08000db4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000df6:	f001 f801 	bl	8001dfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_DAC_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12c      	bne.n	8000e84 <HAL_DAC_MspInit+0x7c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <HAL_DAC_MspInit+0x88>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e5a:	2330      	movs	r3, #48	@ 0x30
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f000 fd48 	bl	8001904 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2036      	movs	r0, #54	@ 0x36
 8000e7a:	f000 fa2e 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e7e:	2036      	movs	r0, #54	@ 0x36
 8000e80:	f000 fa45 	bl	800130e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	50000800 	.word	0x50000800
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d113      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_TIM_Base_MspInit+0x48>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_TIM_Base_MspInit+0x48>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_TIM_Base_MspInit+0x48>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2036      	movs	r0, #54	@ 0x36
 8000ec4:	f000 fa09 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ec8:	2036      	movs	r0, #54	@ 0x36
 8000eca:	f000 fa20 	bl	800130e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40001000 	.word	0x40001000
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000f36:	f000 f8d7 	bl	80010e8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f42:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f46:	f000 fe91 	bl	8001c6c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5c:	f000 fe6c 	bl	8001c38 <HAL_GPIO_TogglePin>
	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8000f60:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <TIM6_DAC_IRQHandler+0x6c>)
 8000f62:	f001 fd2d 	bl	80029c0 <HAL_TIM_IRQHandler>
	HAL_DAC_IRQHandler(&hdac1);
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <TIM6_DAC_IRQHandler+0x70>)
 8000f68:	f000 fa7a 	bl	8001460 <HAL_DAC_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */
//	float y = resonance_filter(adc_values[sample_index]);
	float y = oscillator();
 8000f6c:	f7ff fd3a 	bl	80009e4 <oscillator>
 8000f70:	ed87 0a01 	vstr	s0, [r7, #4]
//	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
//			adc_values[sample_index]);

// Sets the output signal
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
			(uint16_t) (y + 2042));
 8000f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f78:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000fc4 <TIM6_DAC_IRQHandler+0x74>
 8000f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f84:	ee17 3a90 	vmov	r3, s15
 8000f88:	b29b      	uxth	r3, r3
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <TIM6_DAC_IRQHandler+0x70>)
 8000f90:	f000 fabc 	bl	800150c <HAL_DAC_SetValue>

	sample_index++;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <TIM6_DAC_IRQHandler+0x78>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <TIM6_DAC_IRQHandler+0x78>)
 8000fa0:	801a      	strh	r2, [r3, #0]
	if (sample_index >= 1024)
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <TIM6_DAC_IRQHandler+0x78>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fac:	d302      	bcc.n	8000fb4 <TIM6_DAC_IRQHandler+0x64>
		sample_index = 0;
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <TIM6_DAC_IRQHandler+0x78>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000044 	.word	0x20000044
 8000fc0:	20000030 	.word	0x20000030
 8000fc4:	44ff4000 	.word	0x44ff4000
 8000fc8:	2000002c 	.word	0x2000002c

08000fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff0:	480d      	ldr	r0, [pc, #52]	@ (8001028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f001 ffe9 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fd63 	bl	8000aec <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   r0, =_estack
 8001028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001034:	08004338 	.word	0x08004338
  ldr r2, =_sbss
 8001038:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800103c:	200000a4 	.word	0x200000a4

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>

08001042 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f939 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f80e 	bl	8001074 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e001      	b.n	8001068 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001064:	f7ff feac 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001068:	79fb      	ldrb	r3, [r7, #7]

}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_InitTick+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d022      	beq.n	80010ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_InitTick+0x6c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001094:	fbb1 f3f3 	udiv	r3, r1, r3
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f944 	bl	800132a <HAL_SYSTICK_Config>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d809      	bhi.n	80010c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b6:	f000 f910 	bl	80012da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_InitTick+0x70>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e004      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e001      	b.n	80010d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x1c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_IncTick+0x20>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <HAL_IncTick+0x1c>)
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200000a0 	.word	0x200000a0
 8001108:	2000000c 	.word	0x2000000c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200000a0 	.word	0x200000a0

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff40 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff33 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa4 	bl	8001280 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e014      	b.n	800137e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fd4f 	bl	8000e08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e056      	b.n	800144a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	795b      	ldrb	r3, [r3, #5]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_DAC_Start+0x20>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e050      	b.n	800144a <HAL_DAC_Start+0xc2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2202      	movs	r2, #2
 80013b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2201      	movs	r2, #1
 80013c2:	409a      	lsls	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_DAC_Start+0xd0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <HAL_DAC_Start+0xd4>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80013de:	e002      	b.n	80013e6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d11d      	bne.n	800143c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	e014      	b.n	800143c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2102      	movs	r1, #2
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0202 	orr.w	r2, r2, #2
 800143a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000004 	.word	0x20000004
 800145c:	053e2d63 	.word	0x053e2d63

08001460 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001476:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01d      	beq.n	80014be <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d018      	beq.n	80014be <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014b6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f854 	bl	8001566 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01d      	beq.n	8001504 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d018      	beq.n	8001504 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2204      	movs	r2, #4
 80014d6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	f043 0202 	orr.w	r2, r3, #2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80014fc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f9f6 	bl	80018f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e018      	b.n	800155a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	3308      	adds	r3, #8
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e004      	b.n	8001550 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	3314      	adds	r3, #20
 800154e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	461a      	mov	r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_DAC_ConfigChannel+0x1c>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e1a1      	b.n	80018e0 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	795b      	ldrb	r3, [r3, #5]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_DAC_ConfigChannel+0x32>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e198      	b.n	80018e0 <HAL_DAC_ConfigChannel+0x364>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2202      	movs	r2, #2
 80015b8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d17a      	bne.n	80016b8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015c2:	f7ff fda3 	bl	800110c <HAL_GetTick>
 80015c6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d13d      	bne.n	800164a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015ce:	e018      	b.n	8001602 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015d0:	f7ff fd9c 	bl	800110c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d911      	bls.n	8001602 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f043 0208 	orr.w	r2, r3, #8
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2203      	movs	r2, #3
 80015fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e16e      	b.n	80018e0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1df      	bne.n	80015d0 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
 800161a:	e020      	b.n	800165e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800161c:	f7ff fd76 	bl	800110c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d90f      	bls.n	800164a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001630:	2b00      	cmp	r3, #0
 8001632:	da0a      	bge.n	800164a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f043 0208 	orr.w	r2, r3, #8
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2203      	movs	r2, #3
 8001644:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e14a      	b.n	80018e0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001650:	2b00      	cmp	r3, #0
 8001652:	dbe3      	blt.n	800161c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	ea02 0103 	and.w	r1, r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	21ff      	movs	r1, #255	@ 0xff
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	ea02 0103 	and.w	r1, r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d11d      	bne.n	80016fc <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d8:	4013      	ands	r3, r2
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f0:	4313      	orrs	r3, r2
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001714:	4013      	ands	r3, r2
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	e00f      	b.n	8001746 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d102      	bne.n	8001734 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
 8001732:	e008      	b.n	8001746 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
 8001740:	e001      	b.n	8001746 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001768:	4013      	ands	r3, r2
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_DAC_ConfigChannel+0x1fe>
 8001774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001778:	e000      	b.n	800177c <HAL_DAC_ConfigChannel+0x200>
 800177a:	2300      	movs	r3, #0
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	4013      	ands	r3, r2
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	795b      	ldrb	r3, [r3, #5]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_DAC_ConfigChannel+0x22a>
 80017a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a4:	e000      	b.n	80017a8 <HAL_DAC_ConfigChannel+0x22c>
 80017a6:	2300      	movs	r3, #0
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d114      	bne.n	80017e8 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80017be:	f000 ffdd 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80017c2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4a48      	ldr	r2, [pc, #288]	@ (80018e8 <HAL_DAC_ConfigChannel+0x36c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d904      	bls.n	80017d6 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d4:	e00f      	b.n	80017f6 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4a44      	ldr	r2, [pc, #272]	@ (80018ec <HAL_DAC_ConfigChannel+0x370>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d90a      	bls.n	80017f4 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	e006      	b.n	80017f6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ee:	4313      	orrs	r3, r2
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f2:	e000      	b.n	80017f6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80017f4:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001804:	4313      	orrs	r3, r2
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001848:	4013      	ands	r3, r2
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	4313      	orrs	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800186a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	22c0      	movs	r2, #192	@ 0xc0
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	ea02 0103 	and.w	r1, r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2201      	movs	r2, #1
 80018d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80018de:	7ffb      	ldrb	r3, [r7, #31]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	09896800 	.word	0x09896800
 80018ec:	04c4b400 	.word	0x04c4b400

080018f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001912:	e15a      	b.n	8001bca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 814c 	beq.w	8001bc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d005      	beq.n	8001944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001940:	2b02      	cmp	r3, #2
 8001942:	d130      	bne.n	80019a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197a:	2201      	movs	r2, #1
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	f003 0201 	and.w	r2, r3, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d017      	beq.n	80019e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d123      	bne.n	8001a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0203 	and.w	r2, r3, #3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80a6 	beq.w	8001bc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a78:	4b5b      	ldr	r3, [pc, #364]	@ (8001be8 <HAL_GPIO_Init+0x2e4>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001be8 <HAL_GPIO_Init+0x2e4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a84:	4b58      	ldr	r3, [pc, #352]	@ (8001be8 <HAL_GPIO_Init+0x2e4>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a90:	4a56      	ldr	r2, [pc, #344]	@ (8001bec <HAL_GPIO_Init+0x2e8>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aba:	d01f      	beq.n	8001afc <HAL_GPIO_Init+0x1f8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf0 <HAL_GPIO_Init+0x2ec>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d019      	beq.n	8001af8 <HAL_GPIO_Init+0x1f4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1f0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf8 <HAL_GPIO_Init+0x2f4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1ec>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_GPIO_Init+0x2f8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1e8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a48      	ldr	r2, [pc, #288]	@ (8001c00 <HAL_GPIO_Init+0x2fc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1e4>
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	e00a      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e008      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x1fa>
 8001afc:	2300      	movs	r3, #0
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b0e:	4937      	ldr	r1, [pc, #220]	@ (8001bec <HAL_GPIO_Init+0x2e8>)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1c:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b40:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6a:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b70:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b94:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bbe:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f47f ae9d 	bne.w	8001914 <HAL_GPIO_Init+0x10>
  }
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	48000c00 	.word	0x48000c00
 8001bfc:	48001000 	.word	0x48001000
 8001c00:	48001400 	.word	0x48001400
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43d9      	mvns	r1, r3
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f806 	bl	8001c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d141      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d131      	bne.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd0:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd6:	4a46      	ldr	r2, [pc, #280]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce0:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ce8:	4a41      	ldr	r2, [pc, #260]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf0:	4b40      	ldr	r3, [pc, #256]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2232      	movs	r2, #50	@ 0x32
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d06:	e002      	b.n	8001d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d0e:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1a:	d102      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f2      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d22:	4b33      	ldr	r3, [pc, #204]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2e:	d158      	bne.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e057      	b.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d34:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d44:	e04d      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4c:	d141      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d131      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d62:	4a23      	ldr	r2, [pc, #140]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d74:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2232      	movs	r2, #50	@ 0x32
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	4a1c      	ldr	r2, [pc, #112]	@ (8001df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	0c9b      	lsrs	r3, r3, #18
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d92:	e002      	b.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da6:	d102      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f2      	bne.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dba:	d112      	bne.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e011      	b.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dd0:	e007      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd2:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40007000 	.word	0x40007000
 8001df4:	20000004 	.word	0x20000004
 8001df8:	431bde83 	.word	0x431bde83

08001dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40007000 	.word	0x40007000

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e2fe      	b.n	800242c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3a:	4b97      	ldr	r3, [pc, #604]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e44:	4b94      	ldr	r3, [pc, #592]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3e>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_OscConfig+0x44>
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b8d      	ldr	r3, [pc, #564]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d05b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d157      	bne.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e2d9      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x74>
 8001e82:	4b85      	ldr	r3, [pc, #532]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a84      	ldr	r2, [pc, #528]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001eb4:	4b78      	ldr	r3, [pc, #480]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a77      	ldr	r2, [pc, #476]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a74      	ldr	r2, [pc, #464]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f91a 	bl	800110c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f916 	bl	800110c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e29e      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f906 	bl	800110c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f902 	bl	800110c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e28a      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f16:	4b60      	ldr	r3, [pc, #384]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d075      	beq.n	800201e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b59      	ldr	r3, [pc, #356]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b56      	ldr	r3, [pc, #344]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_OscConfig+0x136>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_OscConfig+0x13c>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d11f      	bne.n	8001f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f58:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x154>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e25d      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	4946      	ldr	r1, [pc, #280]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f84:	4b45      	ldr	r3, [pc, #276]	@ (800209c <HAL_RCC_OscConfig+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f873 	bl	8001074 <HAL_InitTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d043      	beq.n	800201c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e249      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d023      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f8ae 	bl	800110c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f8aa 	bl	800110c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e232      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	492d      	ldr	r1, [pc, #180]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
 8001fe6:	e01a      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f88a 	bl	800110c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f886 	bl	800110c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e20e      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800200e:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1e0>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d041      	beq.n	80020ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01c      	beq.n	800206c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff f863 	bl	800110c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff f85f 	bl	800110c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1e7      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ef      	beq.n	800204a <HAL_RCC_OscConfig+0x22e>
 800206a:	e020      	b.n	80020ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_RCC_OscConfig+0x27c>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f846 	bl	800110c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff f842 	bl	800110c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d906      	bls.n	80020a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1ca      	b.n	800242c <HAL_RCC_OscConfig+0x610>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a0:	4b8c      	ldr	r3, [pc, #560]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ea      	bne.n	8002084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a6 	beq.w	8002208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c0:	4b84      	ldr	r3, [pc, #528]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2b4>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x2b6>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a7e      	ldr	r2, [pc, #504]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b7c      	ldr	r3, [pc, #496]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f2:	4b79      	ldr	r3, [pc, #484]	@ (80022d8 <HAL_RCC_OscConfig+0x4bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fe:	4b76      	ldr	r3, [pc, #472]	@ (80022d8 <HAL_RCC_OscConfig+0x4bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	@ (80022d8 <HAL_RCC_OscConfig+0x4bc>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe ffff 	bl	800110c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fffb 	bl	800110c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e183      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	4b6c      	ldr	r3, [pc, #432]	@ (80022d8 <HAL_RCC_OscConfig+0x4bc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d108      	bne.n	800214a <HAL_RCC_OscConfig+0x32e>
 8002138:	4b66      	ldr	r3, [pc, #408]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213e:	4a65      	ldr	r2, [pc, #404]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002148:	e024      	b.n	8002194 <HAL_RCC_OscConfig+0x378>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d110      	bne.n	8002174 <HAL_RCC_OscConfig+0x358>
 8002152:	4b60      	ldr	r3, [pc, #384]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	4a5e      	ldr	r2, [pc, #376]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002162:	4b5c      	ldr	r3, [pc, #368]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	4a5a      	ldr	r2, [pc, #360]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002172:	e00f      	b.n	8002194 <HAL_RCC_OscConfig+0x378>
 8002174:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe ffb6 	bl	800110c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe ffb2 	bl	800110c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e138      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ed      	beq.n	80021a4 <HAL_RCC_OscConfig+0x388>
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff9f 	bl	800110c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe ff9b 	bl	800110c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e121      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e8:	4b3a      	ldr	r3, [pc, #232]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ed      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b35      	ldr	r3, [pc, #212]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	4a34      	ldr	r2, [pc, #208]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03c      	beq.n	800228e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01c      	beq.n	8002256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002222:	4a2c      	ldr	r2, [pc, #176]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe ff6e 	bl	800110c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002234:	f7fe ff6a 	bl	800110c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0f2      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ef      	beq.n	8002234 <HAL_RCC_OscConfig+0x418>
 8002254:	e01b      	b.n	800228e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe ff51 	bl	800110c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226e:	f7fe ff4d 	bl	800110c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0d5      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002280:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ef      	bne.n	800226e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80c9 	beq.w	800242a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f000 8083 	beq.w	80023ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d15e      	bne.n	800236c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a08      	ldr	r2, [pc, #32]	@ (80022d4 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe ff27 	bl	800110c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c0:	e00c      	b.n	80022dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe ff23 	bl	800110c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d905      	bls.n	80022dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ab      	b.n	800242c <HAL_RCC_OscConfig+0x610>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	4b55      	ldr	r3, [pc, #340]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ec      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e8:	4b52      	ldr	r3, [pc, #328]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b52      	ldr	r3, [pc, #328]	@ (8002438 <HAL_RCC_OscConfig+0x61c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6a11      	ldr	r1, [r2, #32]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022f8:	3a01      	subs	r2, #1
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002302:	0212      	lsls	r2, r2, #8
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	3a01      	subs	r2, #1
 800230e:	0552      	lsls	r2, r2, #21
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002316:	0852      	lsrs	r2, r2, #1
 8002318:	3a01      	subs	r2, #1
 800231a:	0652      	lsls	r2, r2, #25
 800231c:	4311      	orrs	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002322:	06d2      	lsls	r2, r2, #27
 8002324:	430a      	orrs	r2, r1
 8002326:	4943      	ldr	r1, [pc, #268]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b41      	ldr	r3, [pc, #260]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a40      	ldr	r2, [pc, #256]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a3d      	ldr	r2, [pc, #244]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fee2 	bl	800110c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fede 	bl	800110c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e066      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x530>
 800236a:	e05e      	b.n	800242a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236c:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a30      	ldr	r2, [pc, #192]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 8002372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fec8 	bl	800110c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fec4 	bl	800110c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e04c      	b.n	800242c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002392:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	4924      	ldr	r1, [pc, #144]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_RCC_OscConfig+0x620>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	60cb      	str	r3, [r1, #12]
 80023aa:	e03e      	b.n	800242a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e039      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_RCC_OscConfig+0x618>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d12c      	bne.n	8002426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	3b01      	subs	r3, #1
 80023d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d123      	bne.n	8002426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11b      	bne.n	8002426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d113      	bne.n	8002426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d109      	bne.n	8002426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	019f800c 	.word	0x019f800c
 800243c:	feeefffc 	.word	0xfeeefffc

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e11e      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b91      	ldr	r3, [pc, #580]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d910      	bls.n	8002488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b8e      	ldr	r3, [pc, #568]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	498c      	ldr	r1, [pc, #560]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b8a      	ldr	r3, [pc, #552]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e106      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d073      	beq.n	800257c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249c:	4b81      	ldr	r3, [pc, #516]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0f4      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024ac:	f000 f972 	bl	8002794 <RCC_GetSysClockFreqFromPLLSource>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4a7c      	ldr	r2, [pc, #496]	@ (80026a8 <HAL_RCC_ClockConfig+0x268>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d93f      	bls.n	800253a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ba:	4b7a      	ldr	r3, [pc, #488]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d033      	beq.n	800253a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d12f      	bne.n	800253a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024da:	4b72      	ldr	r3, [pc, #456]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024e2:	4a70      	ldr	r2, [pc, #448]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e024      	b.n	800253a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f8:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0c6      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0be      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002518:	f000 f8ce 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800251c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a61      	ldr	r2, [pc, #388]	@ (80026a8 <HAL_RCC_ClockConfig+0x268>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d909      	bls.n	800253a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002526:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800252e:	4a5d      	ldr	r2, [pc, #372]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b5a      	ldr	r3, [pc, #360]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4957      	ldr	r1, [pc, #348]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fdde 	bl	800110c <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fdda 	bl	800110c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e095      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b4e      	ldr	r3, [pc, #312]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b43      	ldr	r3, [pc, #268]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a42      	ldr	r2, [pc, #264]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800259a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800259e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025ac:	4b3d      	ldr	r3, [pc, #244]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025b4:	4a3b      	ldr	r2, [pc, #236]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4936      	ldr	r1, [pc, #216]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b80      	cmp	r3, #128	@ 0x80
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025d6:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a32      	ldr	r2, [pc, #200]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e2:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d21d      	bcs.n	800262c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 020f 	bic.w	r2, r3, #15
 80025f8:	4929      	ldr	r1, [pc, #164]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002600:	f7fe fd84 	bl	800110c <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fd80 	bl	800110c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e03b      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d1ed      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4917      	ldr	r1, [pc, #92]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490f      	ldr	r1, [pc, #60]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800266a:	f000 f825 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490c      	ldr	r1, [pc, #48]	@ (80026ac <HAL_RCC_ClockConfig+0x26c>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fcf0 	bl	8001074 <HAL_InitTick>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	04c4b400 	.word	0x04c4b400
 80026ac:	08004148 	.word	0x08004148
 80026b0:	20000004 	.word	0x20000004
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026be:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e047      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026d0:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e03e      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026e2:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d136      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270c:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002716:	68d2      	ldr	r2, [r2, #12]
 8002718:	0a12      	lsrs	r2, r2, #8
 800271a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e00c      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	0a12      	lsrs	r2, r2, #8
 8002734:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0e5b      	lsrs	r3, r3, #25
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e001      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002760:	693b      	ldr	r3, [r7, #16]
}
 8002762:	4618      	mov	r0, r3
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	00f42400 	.word	0x00f42400
 8002778:	016e3600 	.word	0x016e3600

0800277c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004

08002794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3301      	adds	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d10c      	bne.n	80027d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b8:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	4a14      	ldr	r2, [pc, #80]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c2:	68d2      	ldr	r2, [r2, #12]
 80027c4:	0a12      	lsrs	r2, r2, #8
 80027c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
    break;
 80027d0:	e00c      	b.n	80027ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d2:	4a12      	ldr	r2, [pc, #72]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	0a12      	lsrs	r2, r2, #8
 80027e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    break;
 80027ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0e5b      	lsrs	r3, r3, #25
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	016e3600 	.word	0x016e3600
 800281c:	00f42400 	.word	0x00f42400

08002820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e049      	b.n	80028c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fb24 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f000 fa30 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e054      	b.n	8002992 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a26      	ldr	r2, [pc, #152]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002912:	d01d      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_TIM_Base_Start_IT+0xdc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d115      	bne.n	800297c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_TIM_Base_Start_IT+0xec>)
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d015      	beq.n	800298e <HAL_TIM_Base_Start_IT+0xbe>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002968:	d011      	beq.n	800298e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	e008      	b.n	800298e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e000      	b.n	8002990 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40013400 	.word	0x40013400
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40015000 	.word	0x40015000
 80029bc:	00010007 	.word	0x00010007

080029c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0202 	mvn.w	r2, #2
 80029f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f93b 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f92d 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f93e 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0204 	mvn.w	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f915 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f907 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f918 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0208 	mvn.w	r2, #8
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8ef 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8e1 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8f2 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d020      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0210 	mvn.w	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2208      	movs	r2, #8
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8c9 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8bb 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8cc 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f899 	bl	8002c5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa09 	bl	8002f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa01 	bl	8002f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f886 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0220 	mvn.w	r2, #32
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f9c9 	bl	8002f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00c      	beq.n	8002bea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9d5 	bl	8002f94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f9cd 	bl	8002fa8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9c5 	bl	8002fbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00c      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f9bd 	bl	8002fd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4c      	ldr	r2, [pc, #304]	@ (8002e08 <TIM_Base_SetConfig+0x144>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d017      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce2:	d013      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a49      	ldr	r2, [pc, #292]	@ (8002e0c <TIM_Base_SetConfig+0x148>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00f      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a48      	ldr	r2, [pc, #288]	@ (8002e10 <TIM_Base_SetConfig+0x14c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a47      	ldr	r2, [pc, #284]	@ (8002e14 <TIM_Base_SetConfig+0x150>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a46      	ldr	r2, [pc, #280]	@ (8002e18 <TIM_Base_SetConfig+0x154>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_Base_SetConfig+0x48>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a45      	ldr	r2, [pc, #276]	@ (8002e1c <TIM_Base_SetConfig+0x158>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d108      	bne.n	8002d1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a39      	ldr	r2, [pc, #228]	@ (8002e08 <TIM_Base_SetConfig+0x144>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d023      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2c:	d01f      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a36      	ldr	r2, [pc, #216]	@ (8002e0c <TIM_Base_SetConfig+0x148>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01b      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a35      	ldr	r2, [pc, #212]	@ (8002e10 <TIM_Base_SetConfig+0x14c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d017      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <TIM_Base_SetConfig+0x150>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a33      	ldr	r2, [pc, #204]	@ (8002e18 <TIM_Base_SetConfig+0x154>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a33      	ldr	r2, [pc, #204]	@ (8002e20 <TIM_Base_SetConfig+0x15c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a32      	ldr	r2, [pc, #200]	@ (8002e24 <TIM_Base_SetConfig+0x160>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a31      	ldr	r2, [pc, #196]	@ (8002e28 <TIM_Base_SetConfig+0x164>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	@ (8002e1c <TIM_Base_SetConfig+0x158>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <TIM_Base_SetConfig+0x144>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <TIM_Base_SetConfig+0x110>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <TIM_Base_SetConfig+0x154>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x110>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <TIM_Base_SetConfig+0x15c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x110>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <TIM_Base_SetConfig+0x160>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x110>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	@ (8002e28 <TIM_Base_SetConfig+0x164>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x110>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a13      	ldr	r2, [pc, #76]	@ (8002e1c <TIM_Base_SetConfig+0x158>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	40013400 	.word	0x40013400
 8002e1c:	40015000 	.word	0x40015000
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e074      	b.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a34      	ldr	r2, [pc, #208]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a33      	ldr	r2, [pc, #204]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a31      	ldr	r2, [pc, #196]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec4:	d01d      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a11      	ldr	r2, [pc, #68]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10c      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40013400 	.word	0x40013400
 8002f44:	40015000 	.word	0x40015000
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	40014000 	.word	0x40014000

08002f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <memset>:
 8002fe4:	4402      	add	r2, r0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800302c <__libc_init_array+0x38>)
 8002ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8003030 <__libc_init_array+0x3c>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	2600      	movs	r6, #0
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	4d0b      	ldr	r5, [pc, #44]	@ (8003034 <__libc_init_array+0x40>)
 8003006:	4c0c      	ldr	r4, [pc, #48]	@ (8003038 <__libc_init_array+0x44>)
 8003008:	f001 f892 	bl	8004130 <_init>
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	2600      	movs	r6, #0
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	08004330 	.word	0x08004330
 8003030:	08004330 	.word	0x08004330
 8003034:	08004330 	.word	0x08004330
 8003038:	08004334 	.word	0x08004334
 800303c:	00000000 	.word	0x00000000

08003040 <cos>:
 8003040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003042:	ec53 2b10 	vmov	r2, r3, d0
 8003046:	4826      	ldr	r0, [pc, #152]	@ (80030e0 <cos+0xa0>)
 8003048:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800304c:	4281      	cmp	r1, r0
 800304e:	d806      	bhi.n	800305e <cos+0x1e>
 8003050:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80030d8 <cos+0x98>
 8003054:	b005      	add	sp, #20
 8003056:	f85d eb04 	ldr.w	lr, [sp], #4
 800305a:	f000 bde5 	b.w	8003c28 <__kernel_cos>
 800305e:	4821      	ldr	r0, [pc, #132]	@ (80030e4 <cos+0xa4>)
 8003060:	4281      	cmp	r1, r0
 8003062:	d908      	bls.n	8003076 <cos+0x36>
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fa04 	bl	8000474 <__aeabi_dsub>
 800306c:	ec41 0b10 	vmov	d0, r0, r1
 8003070:	b005      	add	sp, #20
 8003072:	f85d fb04 	ldr.w	pc, [sp], #4
 8003076:	4668      	mov	r0, sp
 8003078:	f000 f88a 	bl	8003190 <__ieee754_rem_pio2>
 800307c:	f000 0003 	and.w	r0, r0, #3
 8003080:	2801      	cmp	r0, #1
 8003082:	d00b      	beq.n	800309c <cos+0x5c>
 8003084:	2802      	cmp	r0, #2
 8003086:	d015      	beq.n	80030b4 <cos+0x74>
 8003088:	b9d8      	cbnz	r0, 80030c2 <cos+0x82>
 800308a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800308e:	ed9d 0b00 	vldr	d0, [sp]
 8003092:	f000 fdc9 	bl	8003c28 <__kernel_cos>
 8003096:	ec51 0b10 	vmov	r0, r1, d0
 800309a:	e7e7      	b.n	800306c <cos+0x2c>
 800309c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030a0:	ed9d 0b00 	vldr	d0, [sp]
 80030a4:	f000 fe88 	bl	8003db8 <__kernel_sin>
 80030a8:	ec53 2b10 	vmov	r2, r3, d0
 80030ac:	4610      	mov	r0, r2
 80030ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80030b2:	e7db      	b.n	800306c <cos+0x2c>
 80030b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030b8:	ed9d 0b00 	vldr	d0, [sp]
 80030bc:	f000 fdb4 	bl	8003c28 <__kernel_cos>
 80030c0:	e7f2      	b.n	80030a8 <cos+0x68>
 80030c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030c6:	ed9d 0b00 	vldr	d0, [sp]
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 fe74 	bl	8003db8 <__kernel_sin>
 80030d0:	e7e1      	b.n	8003096 <cos+0x56>
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
	...
 80030e0:	3fe921fb 	.word	0x3fe921fb
 80030e4:	7fefffff 	.word	0x7fefffff

080030e8 <sin>:
 80030e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030ea:	ec53 2b10 	vmov	r2, r3, d0
 80030ee:	4826      	ldr	r0, [pc, #152]	@ (8003188 <sin+0xa0>)
 80030f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80030f4:	4281      	cmp	r1, r0
 80030f6:	d807      	bhi.n	8003108 <sin+0x20>
 80030f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003180 <sin+0x98>
 80030fc:	2000      	movs	r0, #0
 80030fe:	b005      	add	sp, #20
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
 8003104:	f000 be58 	b.w	8003db8 <__kernel_sin>
 8003108:	4820      	ldr	r0, [pc, #128]	@ (800318c <sin+0xa4>)
 800310a:	4281      	cmp	r1, r0
 800310c:	d908      	bls.n	8003120 <sin+0x38>
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd f9af 	bl	8000474 <__aeabi_dsub>
 8003116:	ec41 0b10 	vmov	d0, r0, r1
 800311a:	b005      	add	sp, #20
 800311c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003120:	4668      	mov	r0, sp
 8003122:	f000 f835 	bl	8003190 <__ieee754_rem_pio2>
 8003126:	f000 0003 	and.w	r0, r0, #3
 800312a:	2801      	cmp	r0, #1
 800312c:	d00c      	beq.n	8003148 <sin+0x60>
 800312e:	2802      	cmp	r0, #2
 8003130:	d011      	beq.n	8003156 <sin+0x6e>
 8003132:	b9e8      	cbnz	r0, 8003170 <sin+0x88>
 8003134:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003138:	ed9d 0b00 	vldr	d0, [sp]
 800313c:	2001      	movs	r0, #1
 800313e:	f000 fe3b 	bl	8003db8 <__kernel_sin>
 8003142:	ec51 0b10 	vmov	r0, r1, d0
 8003146:	e7e6      	b.n	8003116 <sin+0x2e>
 8003148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800314c:	ed9d 0b00 	vldr	d0, [sp]
 8003150:	f000 fd6a 	bl	8003c28 <__kernel_cos>
 8003154:	e7f5      	b.n	8003142 <sin+0x5a>
 8003156:	ed9d 1b02 	vldr	d1, [sp, #8]
 800315a:	ed9d 0b00 	vldr	d0, [sp]
 800315e:	2001      	movs	r0, #1
 8003160:	f000 fe2a 	bl	8003db8 <__kernel_sin>
 8003164:	ec53 2b10 	vmov	r2, r3, d0
 8003168:	4610      	mov	r0, r2
 800316a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800316e:	e7d2      	b.n	8003116 <sin+0x2e>
 8003170:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003174:	ed9d 0b00 	vldr	d0, [sp]
 8003178:	f000 fd56 	bl	8003c28 <__kernel_cos>
 800317c:	e7f2      	b.n	8003164 <sin+0x7c>
 800317e:	bf00      	nop
	...
 8003188:	3fe921fb 	.word	0x3fe921fb
 800318c:	7fefffff 	.word	0x7fefffff

08003190 <__ieee754_rem_pio2>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	ec57 6b10 	vmov	r6, r7, d0
 8003198:	4bc5      	ldr	r3, [pc, #788]	@ (80034b0 <__ieee754_rem_pio2+0x320>)
 800319a:	b08d      	sub	sp, #52	@ 0x34
 800319c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80031a0:	4598      	cmp	r8, r3
 80031a2:	4604      	mov	r4, r0
 80031a4:	9704      	str	r7, [sp, #16]
 80031a6:	d807      	bhi.n	80031b8 <__ieee754_rem_pio2+0x28>
 80031a8:	2200      	movs	r2, #0
 80031aa:	2300      	movs	r3, #0
 80031ac:	ed80 0b00 	vstr	d0, [r0]
 80031b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80031b4:	2500      	movs	r5, #0
 80031b6:	e028      	b.n	800320a <__ieee754_rem_pio2+0x7a>
 80031b8:	4bbe      	ldr	r3, [pc, #760]	@ (80034b4 <__ieee754_rem_pio2+0x324>)
 80031ba:	4598      	cmp	r8, r3
 80031bc:	d878      	bhi.n	80032b0 <__ieee754_rem_pio2+0x120>
 80031be:	9b04      	ldr	r3, [sp, #16]
 80031c0:	4dbd      	ldr	r5, [pc, #756]	@ (80034b8 <__ieee754_rem_pio2+0x328>)
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	4630      	mov	r0, r6
 80031c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003478 <__ieee754_rem_pio2+0x2e8>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	4639      	mov	r1, r7
 80031ce:	dd38      	ble.n	8003242 <__ieee754_rem_pio2+0xb2>
 80031d0:	f7fd f950 	bl	8000474 <__aeabi_dsub>
 80031d4:	45a8      	cmp	r8, r5
 80031d6:	4606      	mov	r6, r0
 80031d8:	460f      	mov	r7, r1
 80031da:	d01a      	beq.n	8003212 <__ieee754_rem_pio2+0x82>
 80031dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003480 <__ieee754_rem_pio2+0x2f0>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd f947 	bl	8000474 <__aeabi_dsub>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4680      	mov	r8, r0
 80031ec:	4689      	mov	r9, r1
 80031ee:	4630      	mov	r0, r6
 80031f0:	4639      	mov	r1, r7
 80031f2:	f7fd f93f 	bl	8000474 <__aeabi_dsub>
 80031f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003480 <__ieee754_rem_pio2+0x2f0>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd f93a 	bl	8000474 <__aeabi_dsub>
 8003200:	e9c4 8900 	strd	r8, r9, [r4]
 8003204:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003208:	2501      	movs	r5, #1
 800320a:	4628      	mov	r0, r5
 800320c:	b00d      	add	sp, #52	@ 0x34
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	a39d      	add	r3, pc, #628	@ (adr r3, 8003488 <__ieee754_rem_pio2+0x2f8>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd f92c 	bl	8000474 <__aeabi_dsub>
 800321c:	a39c      	add	r3, pc, #624	@ (adr r3, 8003490 <__ieee754_rem_pio2+0x300>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	4606      	mov	r6, r0
 8003224:	460f      	mov	r7, r1
 8003226:	f7fd f925 	bl	8000474 <__aeabi_dsub>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4680      	mov	r8, r0
 8003230:	4689      	mov	r9, r1
 8003232:	4630      	mov	r0, r6
 8003234:	4639      	mov	r1, r7
 8003236:	f7fd f91d 	bl	8000474 <__aeabi_dsub>
 800323a:	a395      	add	r3, pc, #596	@ (adr r3, 8003490 <__ieee754_rem_pio2+0x300>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	e7dc      	b.n	80031fc <__ieee754_rem_pio2+0x6c>
 8003242:	f7fd f919 	bl	8000478 <__adddf3>
 8003246:	45a8      	cmp	r8, r5
 8003248:	4606      	mov	r6, r0
 800324a:	460f      	mov	r7, r1
 800324c:	d018      	beq.n	8003280 <__ieee754_rem_pio2+0xf0>
 800324e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003480 <__ieee754_rem_pio2+0x2f0>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f910 	bl	8000478 <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4680      	mov	r8, r0
 800325e:	4689      	mov	r9, r1
 8003260:	4630      	mov	r0, r6
 8003262:	4639      	mov	r1, r7
 8003264:	f7fd f906 	bl	8000474 <__aeabi_dsub>
 8003268:	a385      	add	r3, pc, #532	@ (adr r3, 8003480 <__ieee754_rem_pio2+0x2f0>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fd f903 	bl	8000478 <__adddf3>
 8003272:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003276:	e9c4 8900 	strd	r8, r9, [r4]
 800327a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800327e:	e7c4      	b.n	800320a <__ieee754_rem_pio2+0x7a>
 8003280:	a381      	add	r3, pc, #516	@ (adr r3, 8003488 <__ieee754_rem_pio2+0x2f8>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f7fd f8f7 	bl	8000478 <__adddf3>
 800328a:	a381      	add	r3, pc, #516	@ (adr r3, 8003490 <__ieee754_rem_pio2+0x300>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	4606      	mov	r6, r0
 8003292:	460f      	mov	r7, r1
 8003294:	f7fd f8f0 	bl	8000478 <__adddf3>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4680      	mov	r8, r0
 800329e:	4689      	mov	r9, r1
 80032a0:	4630      	mov	r0, r6
 80032a2:	4639      	mov	r1, r7
 80032a4:	f7fd f8e6 	bl	8000474 <__aeabi_dsub>
 80032a8:	a379      	add	r3, pc, #484	@ (adr r3, 8003490 <__ieee754_rem_pio2+0x300>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	e7de      	b.n	800326e <__ieee754_rem_pio2+0xde>
 80032b0:	4b82      	ldr	r3, [pc, #520]	@ (80034bc <__ieee754_rem_pio2+0x32c>)
 80032b2:	4598      	cmp	r8, r3
 80032b4:	f200 80d1 	bhi.w	800345a <__ieee754_rem_pio2+0x2ca>
 80032b8:	f000 fe38 	bl	8003f2c <fabs>
 80032bc:	ec57 6b10 	vmov	r6, r7, d0
 80032c0:	a375      	add	r3, pc, #468	@ (adr r3, 8003498 <__ieee754_rem_pio2+0x308>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	4630      	mov	r0, r6
 80032c8:	4639      	mov	r1, r7
 80032ca:	f7fc ffa5 	bl	8000218 <__aeabi_dmul>
 80032ce:	4b7c      	ldr	r3, [pc, #496]	@ (80034c0 <__ieee754_rem_pio2+0x330>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	f7fd f8d1 	bl	8000478 <__adddf3>
 80032d6:	f7fd fb0d 	bl	80008f4 <__aeabi_d2iz>
 80032da:	4605      	mov	r5, r0
 80032dc:	f7fd fa18 	bl	8000710 <__aeabi_i2d>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032e8:	a363      	add	r3, pc, #396	@ (adr r3, 8003478 <__ieee754_rem_pio2+0x2e8>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fc ff93 	bl	8000218 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4630      	mov	r0, r6
 80032f8:	4639      	mov	r1, r7
 80032fa:	f7fd f8bb 	bl	8000474 <__aeabi_dsub>
 80032fe:	a360      	add	r3, pc, #384	@ (adr r3, 8003480 <__ieee754_rem_pio2+0x2f0>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	4682      	mov	sl, r0
 8003306:	468b      	mov	fp, r1
 8003308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800330c:	f7fc ff84 	bl	8000218 <__aeabi_dmul>
 8003310:	2d1f      	cmp	r5, #31
 8003312:	4606      	mov	r6, r0
 8003314:	460f      	mov	r7, r1
 8003316:	dc0c      	bgt.n	8003332 <__ieee754_rem_pio2+0x1a2>
 8003318:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <__ieee754_rem_pio2+0x334>)
 800331a:	1e6a      	subs	r2, r5, #1
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	4543      	cmp	r3, r8
 8003322:	d006      	beq.n	8003332 <__ieee754_rem_pio2+0x1a2>
 8003324:	4632      	mov	r2, r6
 8003326:	463b      	mov	r3, r7
 8003328:	4650      	mov	r0, sl
 800332a:	4659      	mov	r1, fp
 800332c:	f7fd f8a2 	bl	8000474 <__aeabi_dsub>
 8003330:	e00e      	b.n	8003350 <__ieee754_rem_pio2+0x1c0>
 8003332:	463b      	mov	r3, r7
 8003334:	4632      	mov	r2, r6
 8003336:	4650      	mov	r0, sl
 8003338:	4659      	mov	r1, fp
 800333a:	f7fd f89b 	bl	8000474 <__aeabi_dsub>
 800333e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003342:	9305      	str	r3, [sp, #20]
 8003344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003348:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800334c:	2b10      	cmp	r3, #16
 800334e:	dc02      	bgt.n	8003356 <__ieee754_rem_pio2+0x1c6>
 8003350:	e9c4 0100 	strd	r0, r1, [r4]
 8003354:	e039      	b.n	80033ca <__ieee754_rem_pio2+0x23a>
 8003356:	a34c      	add	r3, pc, #304	@ (adr r3, 8003488 <__ieee754_rem_pio2+0x2f8>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003360:	f7fc ff5a 	bl	8000218 <__aeabi_dmul>
 8003364:	4606      	mov	r6, r0
 8003366:	460f      	mov	r7, r1
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4650      	mov	r0, sl
 800336e:	4659      	mov	r1, fp
 8003370:	f7fd f880 	bl	8000474 <__aeabi_dsub>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4680      	mov	r8, r0
 800337a:	4689      	mov	r9, r1
 800337c:	4650      	mov	r0, sl
 800337e:	4659      	mov	r1, fp
 8003380:	f7fd f878 	bl	8000474 <__aeabi_dsub>
 8003384:	4632      	mov	r2, r6
 8003386:	463b      	mov	r3, r7
 8003388:	f7fd f874 	bl	8000474 <__aeabi_dsub>
 800338c:	a340      	add	r3, pc, #256	@ (adr r3, 8003490 <__ieee754_rem_pio2+0x300>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	4606      	mov	r6, r0
 8003394:	460f      	mov	r7, r1
 8003396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800339a:	f7fc ff3d 	bl	8000218 <__aeabi_dmul>
 800339e:	4632      	mov	r2, r6
 80033a0:	463b      	mov	r3, r7
 80033a2:	f7fd f867 	bl	8000474 <__aeabi_dsub>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4606      	mov	r6, r0
 80033ac:	460f      	mov	r7, r1
 80033ae:	4640      	mov	r0, r8
 80033b0:	4649      	mov	r1, r9
 80033b2:	f7fd f85f 	bl	8000474 <__aeabi_dsub>
 80033b6:	9a05      	ldr	r2, [sp, #20]
 80033b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b31      	cmp	r3, #49	@ 0x31
 80033c0:	dc20      	bgt.n	8003404 <__ieee754_rem_pio2+0x274>
 80033c2:	e9c4 0100 	strd	r0, r1, [r4]
 80033c6:	46c2      	mov	sl, r8
 80033c8:	46cb      	mov	fp, r9
 80033ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80033ce:	4650      	mov	r0, sl
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fd f84d 	bl	8000474 <__aeabi_dsub>
 80033da:	463b      	mov	r3, r7
 80033dc:	4632      	mov	r2, r6
 80033de:	f7fd f849 	bl	8000474 <__aeabi_dsub>
 80033e2:	9b04      	ldr	r3, [sp, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033ea:	f6bf af0e 	bge.w	800320a <__ieee754_rem_pio2+0x7a>
 80033ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80033f2:	6063      	str	r3, [r4, #4]
 80033f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80033f8:	f8c4 8000 	str.w	r8, [r4]
 80033fc:	60a0      	str	r0, [r4, #8]
 80033fe:	60e3      	str	r3, [r4, #12]
 8003400:	426d      	negs	r5, r5
 8003402:	e702      	b.n	800320a <__ieee754_rem_pio2+0x7a>
 8003404:	a326      	add	r3, pc, #152	@ (adr r3, 80034a0 <__ieee754_rem_pio2+0x310>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800340e:	f7fc ff03 	bl	8000218 <__aeabi_dmul>
 8003412:	4606      	mov	r6, r0
 8003414:	460f      	mov	r7, r1
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4640      	mov	r0, r8
 800341c:	4649      	mov	r1, r9
 800341e:	f7fd f829 	bl	8000474 <__aeabi_dsub>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4682      	mov	sl, r0
 8003428:	468b      	mov	fp, r1
 800342a:	4640      	mov	r0, r8
 800342c:	4649      	mov	r1, r9
 800342e:	f7fd f821 	bl	8000474 <__aeabi_dsub>
 8003432:	4632      	mov	r2, r6
 8003434:	463b      	mov	r3, r7
 8003436:	f7fd f81d 	bl	8000474 <__aeabi_dsub>
 800343a:	a31b      	add	r3, pc, #108	@ (adr r3, 80034a8 <__ieee754_rem_pio2+0x318>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4606      	mov	r6, r0
 8003442:	460f      	mov	r7, r1
 8003444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003448:	f7fc fee6 	bl	8000218 <__aeabi_dmul>
 800344c:	4632      	mov	r2, r6
 800344e:	463b      	mov	r3, r7
 8003450:	f7fd f810 	bl	8000474 <__aeabi_dsub>
 8003454:	4606      	mov	r6, r0
 8003456:	460f      	mov	r7, r1
 8003458:	e764      	b.n	8003324 <__ieee754_rem_pio2+0x194>
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <__ieee754_rem_pio2+0x338>)
 800345c:	4598      	cmp	r8, r3
 800345e:	d935      	bls.n	80034cc <__ieee754_rem_pio2+0x33c>
 8003460:	4632      	mov	r2, r6
 8003462:	463b      	mov	r3, r7
 8003464:	4630      	mov	r0, r6
 8003466:	4639      	mov	r1, r7
 8003468:	f7fd f804 	bl	8000474 <__aeabi_dsub>
 800346c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003470:	e9c4 0100 	strd	r0, r1, [r4]
 8003474:	e69e      	b.n	80031b4 <__ieee754_rem_pio2+0x24>
 8003476:	bf00      	nop
 8003478:	54400000 	.word	0x54400000
 800347c:	3ff921fb 	.word	0x3ff921fb
 8003480:	1a626331 	.word	0x1a626331
 8003484:	3dd0b461 	.word	0x3dd0b461
 8003488:	1a600000 	.word	0x1a600000
 800348c:	3dd0b461 	.word	0x3dd0b461
 8003490:	2e037073 	.word	0x2e037073
 8003494:	3ba3198a 	.word	0x3ba3198a
 8003498:	6dc9c883 	.word	0x6dc9c883
 800349c:	3fe45f30 	.word	0x3fe45f30
 80034a0:	2e000000 	.word	0x2e000000
 80034a4:	3ba3198a 	.word	0x3ba3198a
 80034a8:	252049c1 	.word	0x252049c1
 80034ac:	397b839a 	.word	0x397b839a
 80034b0:	3fe921fb 	.word	0x3fe921fb
 80034b4:	4002d97b 	.word	0x4002d97b
 80034b8:	3ff921fb 	.word	0x3ff921fb
 80034bc:	413921fb 	.word	0x413921fb
 80034c0:	3fe00000 	.word	0x3fe00000
 80034c4:	08004158 	.word	0x08004158
 80034c8:	7fefffff 	.word	0x7fefffff
 80034cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80034d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80034d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80034d8:	4630      	mov	r0, r6
 80034da:	460f      	mov	r7, r1
 80034dc:	f7fd fa0a 	bl	80008f4 <__aeabi_d2iz>
 80034e0:	f7fd f916 	bl	8000710 <__aeabi_i2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4630      	mov	r0, r6
 80034ea:	4639      	mov	r1, r7
 80034ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80034f0:	f7fc ffc0 	bl	8000474 <__aeabi_dsub>
 80034f4:	4b22      	ldr	r3, [pc, #136]	@ (8003580 <__ieee754_rem_pio2+0x3f0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	f7fc fe8e 	bl	8000218 <__aeabi_dmul>
 80034fc:	460f      	mov	r7, r1
 80034fe:	4606      	mov	r6, r0
 8003500:	f7fd f9f8 	bl	80008f4 <__aeabi_d2iz>
 8003504:	f7fd f904 	bl	8000710 <__aeabi_i2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4630      	mov	r0, r6
 800350e:	4639      	mov	r1, r7
 8003510:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003514:	f7fc ffae 	bl	8000474 <__aeabi_dsub>
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <__ieee754_rem_pio2+0x3f0>)
 800351a:	2200      	movs	r2, #0
 800351c:	f7fc fe7c 	bl	8000218 <__aeabi_dmul>
 8003520:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003524:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003528:	f04f 0803 	mov.w	r8, #3
 800352c:	2600      	movs	r6, #0
 800352e:	2700      	movs	r7, #0
 8003530:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003534:	4632      	mov	r2, r6
 8003536:	463b      	mov	r3, r7
 8003538:	46c2      	mov	sl, r8
 800353a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800353e:	f7fd f9a7 	bl	8000890 <__aeabi_dcmpeq>
 8003542:	2800      	cmp	r0, #0
 8003544:	d1f4      	bne.n	8003530 <__ieee754_rem_pio2+0x3a0>
 8003546:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <__ieee754_rem_pio2+0x3f4>)
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	462a      	mov	r2, r5
 8003550:	4653      	mov	r3, sl
 8003552:	4621      	mov	r1, r4
 8003554:	a806      	add	r0, sp, #24
 8003556:	f000 f817 	bl	8003588 <__kernel_rem_pio2>
 800355a:	9b04      	ldr	r3, [sp, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	4605      	mov	r5, r0
 8003560:	f6bf ae53 	bge.w	800320a <__ieee754_rem_pio2+0x7a>
 8003564:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003568:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800356c:	e9c4 2300 	strd	r2, r3, [r4]
 8003570:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003578:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800357c:	e740      	b.n	8003400 <__ieee754_rem_pio2+0x270>
 800357e:	bf00      	nop
 8003580:	41700000 	.word	0x41700000
 8003584:	080041d8 	.word	0x080041d8

08003588 <__kernel_rem_pio2>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	ed2d 8b02 	vpush	{d8}
 8003590:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003594:	f112 0f14 	cmn.w	r2, #20
 8003598:	9306      	str	r3, [sp, #24]
 800359a:	9104      	str	r1, [sp, #16]
 800359c:	4bc2      	ldr	r3, [pc, #776]	@ (80038a8 <__kernel_rem_pio2+0x320>)
 800359e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80035a0:	9008      	str	r0, [sp, #32]
 80035a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	9b06      	ldr	r3, [sp, #24]
 80035aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80035ae:	bfa8      	it	ge
 80035b0:	1ed4      	subge	r4, r2, #3
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	bfb2      	itee	lt
 80035b6:	2400      	movlt	r4, #0
 80035b8:	2318      	movge	r3, #24
 80035ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80035be:	f06f 0317 	mvn.w	r3, #23
 80035c2:	fb04 3303 	mla	r3, r4, r3, r3
 80035c6:	eb03 0b02 	add.w	fp, r3, r2
 80035ca:	9b00      	ldr	r3, [sp, #0]
 80035cc:	9a05      	ldr	r2, [sp, #20]
 80035ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8003898 <__kernel_rem_pio2+0x310>
 80035d2:	eb03 0802 	add.w	r8, r3, r2
 80035d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80035d8:	1aa7      	subs	r7, r4, r2
 80035da:	ae20      	add	r6, sp, #128	@ 0x80
 80035dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80035e0:	2500      	movs	r5, #0
 80035e2:	4545      	cmp	r5, r8
 80035e4:	dd12      	ble.n	800360c <__kernel_rem_pio2+0x84>
 80035e6:	9b06      	ldr	r3, [sp, #24]
 80035e8:	aa20      	add	r2, sp, #128	@ 0x80
 80035ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80035ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80035f2:	2700      	movs	r7, #0
 80035f4:	9b00      	ldr	r3, [sp, #0]
 80035f6:	429f      	cmp	r7, r3
 80035f8:	dc2e      	bgt.n	8003658 <__kernel_rem_pio2+0xd0>
 80035fa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8003898 <__kernel_rem_pio2+0x310>
 80035fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003602:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003606:	46a8      	mov	r8, r5
 8003608:	2600      	movs	r6, #0
 800360a:	e01b      	b.n	8003644 <__kernel_rem_pio2+0xbc>
 800360c:	42ef      	cmn	r7, r5
 800360e:	d407      	bmi.n	8003620 <__kernel_rem_pio2+0x98>
 8003610:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003614:	f7fd f87c 	bl	8000710 <__aeabi_i2d>
 8003618:	e8e6 0102 	strd	r0, r1, [r6], #8
 800361c:	3501      	adds	r5, #1
 800361e:	e7e0      	b.n	80035e2 <__kernel_rem_pio2+0x5a>
 8003620:	ec51 0b18 	vmov	r0, r1, d8
 8003624:	e7f8      	b.n	8003618 <__kernel_rem_pio2+0x90>
 8003626:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800362a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800362e:	f7fc fdf3 	bl	8000218 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800363a:	f7fc ff1d 	bl	8000478 <__adddf3>
 800363e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003642:	3601      	adds	r6, #1
 8003644:	9b05      	ldr	r3, [sp, #20]
 8003646:	429e      	cmp	r6, r3
 8003648:	dded      	ble.n	8003626 <__kernel_rem_pio2+0x9e>
 800364a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800364e:	3701      	adds	r7, #1
 8003650:	ecaa 7b02 	vstmia	sl!, {d7}
 8003654:	3508      	adds	r5, #8
 8003656:	e7cd      	b.n	80035f4 <__kernel_rem_pio2+0x6c>
 8003658:	9b00      	ldr	r3, [sp, #0]
 800365a:	f8dd 8000 	ldr.w	r8, [sp]
 800365e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003664:	930a      	str	r3, [sp, #40]	@ 0x28
 8003666:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003668:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800366c:	9309      	str	r3, [sp, #36]	@ 0x24
 800366e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003674:	ab98      	add	r3, sp, #608	@ 0x260
 8003676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800367a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800367e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003682:	ac0c      	add	r4, sp, #48	@ 0x30
 8003684:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003686:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800368a:	46a1      	mov	r9, r4
 800368c:	46c2      	mov	sl, r8
 800368e:	f1ba 0f00 	cmp.w	sl, #0
 8003692:	dc77      	bgt.n	8003784 <__kernel_rem_pio2+0x1fc>
 8003694:	4658      	mov	r0, fp
 8003696:	ed9d 0b02 	vldr	d0, [sp, #8]
 800369a:	f000 fc51 	bl	8003f40 <scalbn>
 800369e:	ec57 6b10 	vmov	r6, r7, d0
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80036a8:	4630      	mov	r0, r6
 80036aa:	4639      	mov	r1, r7
 80036ac:	f7fc fdb4 	bl	8000218 <__aeabi_dmul>
 80036b0:	ec41 0b10 	vmov	d0, r0, r1
 80036b4:	f000 fcc0 	bl	8004038 <floor>
 80036b8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ac <__kernel_rem_pio2+0x324>)
 80036ba:	ec51 0b10 	vmov	r0, r1, d0
 80036be:	2200      	movs	r2, #0
 80036c0:	f7fc fdaa 	bl	8000218 <__aeabi_dmul>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4630      	mov	r0, r6
 80036ca:	4639      	mov	r1, r7
 80036cc:	f7fc fed2 	bl	8000474 <__aeabi_dsub>
 80036d0:	460f      	mov	r7, r1
 80036d2:	4606      	mov	r6, r0
 80036d4:	f7fd f90e 	bl	80008f4 <__aeabi_d2iz>
 80036d8:	9002      	str	r0, [sp, #8]
 80036da:	f7fd f819 	bl	8000710 <__aeabi_i2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4630      	mov	r0, r6
 80036e4:	4639      	mov	r1, r7
 80036e6:	f7fc fec5 	bl	8000474 <__aeabi_dsub>
 80036ea:	f1bb 0f00 	cmp.w	fp, #0
 80036ee:	4606      	mov	r6, r0
 80036f0:	460f      	mov	r7, r1
 80036f2:	dd6c      	ble.n	80037ce <__kernel_rem_pio2+0x246>
 80036f4:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80036f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80036fa:	9d02      	ldr	r5, [sp, #8]
 80036fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003700:	f1cb 0018 	rsb	r0, fp, #24
 8003704:	fa43 f200 	asr.w	r2, r3, r0
 8003708:	4415      	add	r5, r2
 800370a:	4082      	lsls	r2, r0
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003710:	9502      	str	r5, [sp, #8]
 8003712:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003716:	f1cb 0217 	rsb	r2, fp, #23
 800371a:	fa43 f902 	asr.w	r9, r3, r2
 800371e:	f1b9 0f00 	cmp.w	r9, #0
 8003722:	dd64      	ble.n	80037ee <__kernel_rem_pio2+0x266>
 8003724:	9b02      	ldr	r3, [sp, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	3301      	adds	r3, #1
 800372a:	9302      	str	r3, [sp, #8]
 800372c:	4615      	mov	r5, r2
 800372e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003732:	4590      	cmp	r8, r2
 8003734:	f300 80a1 	bgt.w	800387a <__kernel_rem_pio2+0x2f2>
 8003738:	f1bb 0f00 	cmp.w	fp, #0
 800373c:	dd07      	ble.n	800374e <__kernel_rem_pio2+0x1c6>
 800373e:	f1bb 0f01 	cmp.w	fp, #1
 8003742:	f000 80c1 	beq.w	80038c8 <__kernel_rem_pio2+0x340>
 8003746:	f1bb 0f02 	cmp.w	fp, #2
 800374a:	f000 80c8 	beq.w	80038de <__kernel_rem_pio2+0x356>
 800374e:	f1b9 0f02 	cmp.w	r9, #2
 8003752:	d14c      	bne.n	80037ee <__kernel_rem_pio2+0x266>
 8003754:	4632      	mov	r2, r6
 8003756:	463b      	mov	r3, r7
 8003758:	4955      	ldr	r1, [pc, #340]	@ (80038b0 <__kernel_rem_pio2+0x328>)
 800375a:	2000      	movs	r0, #0
 800375c:	f7fc fe8a 	bl	8000474 <__aeabi_dsub>
 8003760:	4606      	mov	r6, r0
 8003762:	460f      	mov	r7, r1
 8003764:	2d00      	cmp	r5, #0
 8003766:	d042      	beq.n	80037ee <__kernel_rem_pio2+0x266>
 8003768:	4658      	mov	r0, fp
 800376a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80038a0 <__kernel_rem_pio2+0x318>
 800376e:	f000 fbe7 	bl	8003f40 <scalbn>
 8003772:	4630      	mov	r0, r6
 8003774:	4639      	mov	r1, r7
 8003776:	ec53 2b10 	vmov	r2, r3, d0
 800377a:	f7fc fe7b 	bl	8000474 <__aeabi_dsub>
 800377e:	4606      	mov	r6, r0
 8003780:	460f      	mov	r7, r1
 8003782:	e034      	b.n	80037ee <__kernel_rem_pio2+0x266>
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <__kernel_rem_pio2+0x32c>)
 8003786:	2200      	movs	r2, #0
 8003788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800378c:	f7fc fd44 	bl	8000218 <__aeabi_dmul>
 8003790:	f7fd f8b0 	bl	80008f4 <__aeabi_d2iz>
 8003794:	f7fc ffbc 	bl	8000710 <__aeabi_i2d>
 8003798:	4b47      	ldr	r3, [pc, #284]	@ (80038b8 <__kernel_rem_pio2+0x330>)
 800379a:	2200      	movs	r2, #0
 800379c:	4606      	mov	r6, r0
 800379e:	460f      	mov	r7, r1
 80037a0:	f7fc fd3a 	bl	8000218 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037ac:	f7fc fe62 	bl	8000474 <__aeabi_dsub>
 80037b0:	f7fd f8a0 	bl	80008f4 <__aeabi_d2iz>
 80037b4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80037b8:	f849 0b04 	str.w	r0, [r9], #4
 80037bc:	4639      	mov	r1, r7
 80037be:	4630      	mov	r0, r6
 80037c0:	f7fc fe5a 	bl	8000478 <__adddf3>
 80037c4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80037c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037cc:	e75f      	b.n	800368e <__kernel_rem_pio2+0x106>
 80037ce:	d107      	bne.n	80037e0 <__kernel_rem_pio2+0x258>
 80037d0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80037d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80037de:	e79e      	b.n	800371e <__kernel_rem_pio2+0x196>
 80037e0:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <__kernel_rem_pio2+0x334>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	f7fd f872 	bl	80008cc <__aeabi_dcmpge>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d143      	bne.n	8003874 <__kernel_rem_pio2+0x2ec>
 80037ec:	4681      	mov	r9, r0
 80037ee:	2200      	movs	r2, #0
 80037f0:	2300      	movs	r3, #0
 80037f2:	4630      	mov	r0, r6
 80037f4:	4639      	mov	r1, r7
 80037f6:	f7fd f84b 	bl	8000890 <__aeabi_dcmpeq>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	f000 80c1 	beq.w	8003982 <__kernel_rem_pio2+0x3fa>
 8003800:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8003804:	2200      	movs	r2, #0
 8003806:	9900      	ldr	r1, [sp, #0]
 8003808:	428b      	cmp	r3, r1
 800380a:	da70      	bge.n	80038ee <__kernel_rem_pio2+0x366>
 800380c:	2a00      	cmp	r2, #0
 800380e:	f000 808b 	beq.w	8003928 <__kernel_rem_pio2+0x3a0>
 8003812:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003816:	ab0c      	add	r3, sp, #48	@ 0x30
 8003818:	f1ab 0b18 	sub.w	fp, fp, #24
 800381c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f6      	beq.n	8003812 <__kernel_rem_pio2+0x28a>
 8003824:	4658      	mov	r0, fp
 8003826:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80038a0 <__kernel_rem_pio2+0x318>
 800382a:	f000 fb89 	bl	8003f40 <scalbn>
 800382e:	f108 0301 	add.w	r3, r8, #1
 8003832:	00da      	lsls	r2, r3, #3
 8003834:	9205      	str	r2, [sp, #20]
 8003836:	ec55 4b10 	vmov	r4, r5, d0
 800383a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800383c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80038b4 <__kernel_rem_pio2+0x32c>
 8003840:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003844:	4646      	mov	r6, r8
 8003846:	f04f 0a00 	mov.w	sl, #0
 800384a:	2e00      	cmp	r6, #0
 800384c:	f280 80d1 	bge.w	80039f2 <__kernel_rem_pio2+0x46a>
 8003850:	4644      	mov	r4, r8
 8003852:	2c00      	cmp	r4, #0
 8003854:	f2c0 80ff 	blt.w	8003a56 <__kernel_rem_pio2+0x4ce>
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <__kernel_rem_pio2+0x338>)
 800385a:	461f      	mov	r7, r3
 800385c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800385e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003862:	9306      	str	r3, [sp, #24]
 8003864:	f04f 0a00 	mov.w	sl, #0
 8003868:	f04f 0b00 	mov.w	fp, #0
 800386c:	2600      	movs	r6, #0
 800386e:	eba8 0504 	sub.w	r5, r8, r4
 8003872:	e0e4      	b.n	8003a3e <__kernel_rem_pio2+0x4b6>
 8003874:	f04f 0902 	mov.w	r9, #2
 8003878:	e754      	b.n	8003724 <__kernel_rem_pio2+0x19c>
 800387a:	f854 3b04 	ldr.w	r3, [r4], #4
 800387e:	bb0d      	cbnz	r5, 80038c4 <__kernel_rem_pio2+0x33c>
 8003880:	b123      	cbz	r3, 800388c <__kernel_rem_pio2+0x304>
 8003882:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003886:	f844 3c04 	str.w	r3, [r4, #-4]
 800388a:	2301      	movs	r3, #1
 800388c:	3201      	adds	r2, #1
 800388e:	461d      	mov	r5, r3
 8003890:	e74f      	b.n	8003732 <__kernel_rem_pio2+0x1aa>
 8003892:	bf00      	nop
 8003894:	f3af 8000 	nop.w
	...
 80038a4:	3ff00000 	.word	0x3ff00000
 80038a8:	08004320 	.word	0x08004320
 80038ac:	40200000 	.word	0x40200000
 80038b0:	3ff00000 	.word	0x3ff00000
 80038b4:	3e700000 	.word	0x3e700000
 80038b8:	41700000 	.word	0x41700000
 80038bc:	3fe00000 	.word	0x3fe00000
 80038c0:	080042e0 	.word	0x080042e0
 80038c4:	1acb      	subs	r3, r1, r3
 80038c6:	e7de      	b.n	8003886 <__kernel_rem_pio2+0x2fe>
 80038c8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80038cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80038ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80038d6:	a90c      	add	r1, sp, #48	@ 0x30
 80038d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80038dc:	e737      	b.n	800374e <__kernel_rem_pio2+0x1c6>
 80038de:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80038e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80038ec:	e7f3      	b.n	80038d6 <__kernel_rem_pio2+0x34e>
 80038ee:	a90c      	add	r1, sp, #48	@ 0x30
 80038f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	e785      	b.n	8003806 <__kernel_rem_pio2+0x27e>
 80038fa:	3401      	adds	r4, #1
 80038fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003900:	2a00      	cmp	r2, #0
 8003902:	d0fa      	beq.n	80038fa <__kernel_rem_pio2+0x372>
 8003904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003906:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800390a:	eb0d 0503 	add.w	r5, sp, r3
 800390e:	9b06      	ldr	r3, [sp, #24]
 8003910:	aa20      	add	r2, sp, #128	@ 0x80
 8003912:	4443      	add	r3, r8
 8003914:	f108 0701 	add.w	r7, r8, #1
 8003918:	3d98      	subs	r5, #152	@ 0x98
 800391a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800391e:	4444      	add	r4, r8
 8003920:	42bc      	cmp	r4, r7
 8003922:	da04      	bge.n	800392e <__kernel_rem_pio2+0x3a6>
 8003924:	46a0      	mov	r8, r4
 8003926:	e6a2      	b.n	800366e <__kernel_rem_pio2+0xe6>
 8003928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800392a:	2401      	movs	r4, #1
 800392c:	e7e6      	b.n	80038fc <__kernel_rem_pio2+0x374>
 800392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003930:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003934:	f7fc feec 	bl	8000710 <__aeabi_i2d>
 8003938:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8003bf8 <__kernel_rem_pio2+0x670>
 800393c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003948:	46b2      	mov	sl, r6
 800394a:	f04f 0800 	mov.w	r8, #0
 800394e:	9b05      	ldr	r3, [sp, #20]
 8003950:	4598      	cmp	r8, r3
 8003952:	dd05      	ble.n	8003960 <__kernel_rem_pio2+0x3d8>
 8003954:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003958:	3701      	adds	r7, #1
 800395a:	eca5 7b02 	vstmia	r5!, {d7}
 800395e:	e7df      	b.n	8003920 <__kernel_rem_pio2+0x398>
 8003960:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003964:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003968:	f7fc fc56 	bl	8000218 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003974:	f7fc fd80 	bl	8000478 <__adddf3>
 8003978:	f108 0801 	add.w	r8, r8, #1
 800397c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003980:	e7e5      	b.n	800394e <__kernel_rem_pio2+0x3c6>
 8003982:	f1cb 0000 	rsb	r0, fp, #0
 8003986:	ec47 6b10 	vmov	d0, r6, r7
 800398a:	f000 fad9 	bl	8003f40 <scalbn>
 800398e:	ec55 4b10 	vmov	r4, r5, d0
 8003992:	4b9b      	ldr	r3, [pc, #620]	@ (8003c00 <__kernel_rem_pio2+0x678>)
 8003994:	2200      	movs	r2, #0
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f7fc ff97 	bl	80008cc <__aeabi_dcmpge>
 800399e:	b300      	cbz	r0, 80039e2 <__kernel_rem_pio2+0x45a>
 80039a0:	4b98      	ldr	r3, [pc, #608]	@ (8003c04 <__kernel_rem_pio2+0x67c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fc36 	bl	8000218 <__aeabi_dmul>
 80039ac:	f7fc ffa2 	bl	80008f4 <__aeabi_d2iz>
 80039b0:	4606      	mov	r6, r0
 80039b2:	f7fc fead 	bl	8000710 <__aeabi_i2d>
 80039b6:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <__kernel_rem_pio2+0x678>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	f7fc fc2d 	bl	8000218 <__aeabi_dmul>
 80039be:	460b      	mov	r3, r1
 80039c0:	4602      	mov	r2, r0
 80039c2:	4629      	mov	r1, r5
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7fc fd55 	bl	8000474 <__aeabi_dsub>
 80039ca:	f7fc ff93 	bl	80008f4 <__aeabi_d2iz>
 80039ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80039d0:	f10b 0b18 	add.w	fp, fp, #24
 80039d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80039d8:	f108 0801 	add.w	r8, r8, #1
 80039dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80039e0:	e720      	b.n	8003824 <__kernel_rem_pio2+0x29c>
 80039e2:	4620      	mov	r0, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7fc ff85 	bl	80008f4 <__aeabi_d2iz>
 80039ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80039ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80039f0:	e718      	b.n	8003824 <__kernel_rem_pio2+0x29c>
 80039f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80039f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80039f8:	f7fc fe8a 	bl	8000710 <__aeabi_i2d>
 80039fc:	4622      	mov	r2, r4
 80039fe:	462b      	mov	r3, r5
 8003a00:	f7fc fc0a 	bl	8000218 <__aeabi_dmul>
 8003a04:	4652      	mov	r2, sl
 8003a06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc fc02 	bl	8000218 <__aeabi_dmul>
 8003a14:	3e01      	subs	r6, #1
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	e716      	b.n	800384a <__kernel_rem_pio2+0x2c2>
 8003a1c:	9906      	ldr	r1, [sp, #24]
 8003a1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003a22:	9106      	str	r1, [sp, #24]
 8003a24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003a28:	f7fc fbf6 	bl	8000218 <__aeabi_dmul>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4650      	mov	r0, sl
 8003a32:	4659      	mov	r1, fp
 8003a34:	f7fc fd20 	bl	8000478 <__adddf3>
 8003a38:	3601      	adds	r6, #1
 8003a3a:	4682      	mov	sl, r0
 8003a3c:	468b      	mov	fp, r1
 8003a3e:	9b00      	ldr	r3, [sp, #0]
 8003a40:	429e      	cmp	r6, r3
 8003a42:	dc01      	bgt.n	8003a48 <__kernel_rem_pio2+0x4c0>
 8003a44:	42ae      	cmp	r6, r5
 8003a46:	dde9      	ble.n	8003a1c <__kernel_rem_pio2+0x494>
 8003a48:	ab48      	add	r3, sp, #288	@ 0x120
 8003a4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003a4e:	e9c5 ab00 	strd	sl, fp, [r5]
 8003a52:	3c01      	subs	r4, #1
 8003a54:	e6fd      	b.n	8003852 <__kernel_rem_pio2+0x2ca>
 8003a56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	dc0b      	bgt.n	8003a74 <__kernel_rem_pio2+0x4ec>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dc35      	bgt.n	8003acc <__kernel_rem_pio2+0x544>
 8003a60:	d059      	beq.n	8003b16 <__kernel_rem_pio2+0x58e>
 8003a62:	9b02      	ldr	r3, [sp, #8]
 8003a64:	f003 0007 	and.w	r0, r3, #7
 8003a68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003a6c:	ecbd 8b02 	vpop	{d8}
 8003a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d1f3      	bne.n	8003a62 <__kernel_rem_pio2+0x4da>
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a80:	eb0d 0403 	add.w	r4, sp, r3
 8003a84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003a88:	4625      	mov	r5, r4
 8003a8a:	46c2      	mov	sl, r8
 8003a8c:	f1ba 0f00 	cmp.w	sl, #0
 8003a90:	dc69      	bgt.n	8003b66 <__kernel_rem_pio2+0x5de>
 8003a92:	4645      	mov	r5, r8
 8003a94:	2d01      	cmp	r5, #1
 8003a96:	f300 8087 	bgt.w	8003ba8 <__kernel_rem_pio2+0x620>
 8003a9a:	9c05      	ldr	r4, [sp, #20]
 8003a9c:	ab48      	add	r3, sp, #288	@ 0x120
 8003a9e:	441c      	add	r4, r3
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f1b8 0f01 	cmp.w	r8, #1
 8003aa8:	f300 809c 	bgt.w	8003be4 <__kernel_rem_pio2+0x65c>
 8003aac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8003ab0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8003ab4:	f1b9 0f00 	cmp.w	r9, #0
 8003ab8:	f040 80a6 	bne.w	8003c08 <__kernel_rem_pio2+0x680>
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	e9c3 5600 	strd	r5, r6, [r3]
 8003ac2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8003ac6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003aca:	e7ca      	b.n	8003a62 <__kernel_rem_pio2+0x4da>
 8003acc:	9d05      	ldr	r5, [sp, #20]
 8003ace:	ab48      	add	r3, sp, #288	@ 0x120
 8003ad0:	441d      	add	r5, r3
 8003ad2:	4644      	mov	r4, r8
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	da35      	bge.n	8003b48 <__kernel_rem_pio2+0x5c0>
 8003adc:	f1b9 0f00 	cmp.w	r9, #0
 8003ae0:	d038      	beq.n	8003b54 <__kernel_rem_pio2+0x5cc>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003ae8:	9c04      	ldr	r4, [sp, #16]
 8003aea:	e9c4 2300 	strd	r2, r3, [r4]
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003af6:	f7fc fcbd 	bl	8000474 <__aeabi_dsub>
 8003afa:	ad4a      	add	r5, sp, #296	@ 0x128
 8003afc:	2401      	movs	r4, #1
 8003afe:	45a0      	cmp	r8, r4
 8003b00:	da2b      	bge.n	8003b5a <__kernel_rem_pio2+0x5d2>
 8003b02:	f1b9 0f00 	cmp.w	r9, #0
 8003b06:	d002      	beq.n	8003b0e <__kernel_rem_pio2+0x586>
 8003b08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	9b04      	ldr	r3, [sp, #16]
 8003b10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003b14:	e7a5      	b.n	8003a62 <__kernel_rem_pio2+0x4da>
 8003b16:	9c05      	ldr	r4, [sp, #20]
 8003b18:	ab48      	add	r3, sp, #288	@ 0x120
 8003b1a:	441c      	add	r4, r3
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f1b8 0f00 	cmp.w	r8, #0
 8003b24:	da09      	bge.n	8003b3a <__kernel_rem_pio2+0x5b2>
 8003b26:	f1b9 0f00 	cmp.w	r9, #0
 8003b2a:	d002      	beq.n	8003b32 <__kernel_rem_pio2+0x5aa>
 8003b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b30:	4619      	mov	r1, r3
 8003b32:	9b04      	ldr	r3, [sp, #16]
 8003b34:	e9c3 0100 	strd	r0, r1, [r3]
 8003b38:	e793      	b.n	8003a62 <__kernel_rem_pio2+0x4da>
 8003b3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003b3e:	f7fc fc9b 	bl	8000478 <__adddf3>
 8003b42:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003b46:	e7eb      	b.n	8003b20 <__kernel_rem_pio2+0x598>
 8003b48:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003b4c:	f7fc fc94 	bl	8000478 <__adddf3>
 8003b50:	3c01      	subs	r4, #1
 8003b52:	e7c1      	b.n	8003ad8 <__kernel_rem_pio2+0x550>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e7c6      	b.n	8003ae8 <__kernel_rem_pio2+0x560>
 8003b5a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003b5e:	f7fc fc8b 	bl	8000478 <__adddf3>
 8003b62:	3401      	adds	r4, #1
 8003b64:	e7cb      	b.n	8003afe <__kernel_rem_pio2+0x576>
 8003b66:	ed35 7b02 	vldmdb	r5!, {d7}
 8003b6a:	ed8d 7b00 	vstr	d7, [sp]
 8003b6e:	ed95 7b02 	vldr	d7, [r5, #8]
 8003b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b76:	ec53 2b17 	vmov	r2, r3, d7
 8003b7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b7e:	f7fc fc7b 	bl	8000478 <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4606      	mov	r6, r0
 8003b88:	460f      	mov	r7, r1
 8003b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b8e:	f7fc fc71 	bl	8000474 <__aeabi_dsub>
 8003b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b96:	f7fc fc6f 	bl	8000478 <__adddf3>
 8003b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003b9e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003ba2:	e9c5 6700 	strd	r6, r7, [r5]
 8003ba6:	e771      	b.n	8003a8c <__kernel_rem_pio2+0x504>
 8003ba8:	ed34 7b02 	vldmdb	r4!, {d7}
 8003bac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8003bb0:	ec51 0b17 	vmov	r0, r1, d7
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	465b      	mov	r3, fp
 8003bb8:	ed8d 7b00 	vstr	d7, [sp]
 8003bbc:	f7fc fc5c 	bl	8000478 <__adddf3>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bcc:	f7fc fc52 	bl	8000474 <__aeabi_dsub>
 8003bd0:	4652      	mov	r2, sl
 8003bd2:	465b      	mov	r3, fp
 8003bd4:	f7fc fc50 	bl	8000478 <__adddf3>
 8003bd8:	3d01      	subs	r5, #1
 8003bda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bde:	e9c4 6700 	strd	r6, r7, [r4]
 8003be2:	e757      	b.n	8003a94 <__kernel_rem_pio2+0x50c>
 8003be4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003be8:	f7fc fc46 	bl	8000478 <__adddf3>
 8003bec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003bf0:	e758      	b.n	8003aa4 <__kernel_rem_pio2+0x51c>
 8003bf2:	bf00      	nop
 8003bf4:	f3af 8000 	nop.w
	...
 8003c00:	41700000 	.word	0x41700000
 8003c04:	3e700000 	.word	0x3e700000
 8003c08:	9b04      	ldr	r3, [sp, #16]
 8003c0a:	9a04      	ldr	r2, [sp, #16]
 8003c0c:	601d      	str	r5, [r3, #0]
 8003c0e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8003c12:	605c      	str	r4, [r3, #4]
 8003c14:	609f      	str	r7, [r3, #8]
 8003c16:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8003c1a:	60d3      	str	r3, [r2, #12]
 8003c1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c20:	6110      	str	r0, [r2, #16]
 8003c22:	6153      	str	r3, [r2, #20]
 8003c24:	e71d      	b.n	8003a62 <__kernel_rem_pio2+0x4da>
 8003c26:	bf00      	nop

08003c28 <__kernel_cos>:
 8003c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	ec57 6b10 	vmov	r6, r7, d0
 8003c30:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003c34:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003c38:	ed8d 1b00 	vstr	d1, [sp]
 8003c3c:	d206      	bcs.n	8003c4c <__kernel_cos+0x24>
 8003c3e:	4630      	mov	r0, r6
 8003c40:	4639      	mov	r1, r7
 8003c42:	f7fc fe57 	bl	80008f4 <__aeabi_d2iz>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	f000 8088 	beq.w	8003d5c <__kernel_cos+0x134>
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4630      	mov	r0, r6
 8003c52:	4639      	mov	r1, r7
 8003c54:	f7fc fae0 	bl	8000218 <__aeabi_dmul>
 8003c58:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <__kernel_cos+0x178>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	460d      	mov	r5, r1
 8003c60:	f7fc fada 	bl	8000218 <__aeabi_dmul>
 8003c64:	a340      	add	r3, pc, #256	@ (adr r3, 8003d68 <__kernel_cos+0x140>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	4682      	mov	sl, r0
 8003c6c:	468b      	mov	fp, r1
 8003c6e:	4620      	mov	r0, r4
 8003c70:	4629      	mov	r1, r5
 8003c72:	f7fc fad1 	bl	8000218 <__aeabi_dmul>
 8003c76:	a33e      	add	r3, pc, #248	@ (adr r3, 8003d70 <__kernel_cos+0x148>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f7fc fbfc 	bl	8000478 <__adddf3>
 8003c80:	4622      	mov	r2, r4
 8003c82:	462b      	mov	r3, r5
 8003c84:	f7fc fac8 	bl	8000218 <__aeabi_dmul>
 8003c88:	a33b      	add	r3, pc, #236	@ (adr r3, 8003d78 <__kernel_cos+0x150>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f7fc fbf1 	bl	8000474 <__aeabi_dsub>
 8003c92:	4622      	mov	r2, r4
 8003c94:	462b      	mov	r3, r5
 8003c96:	f7fc fabf 	bl	8000218 <__aeabi_dmul>
 8003c9a:	a339      	add	r3, pc, #228	@ (adr r3, 8003d80 <__kernel_cos+0x158>)
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f7fc fbea 	bl	8000478 <__adddf3>
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	f7fc fab6 	bl	8000218 <__aeabi_dmul>
 8003cac:	a336      	add	r3, pc, #216	@ (adr r3, 8003d88 <__kernel_cos+0x160>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc fbdf 	bl	8000474 <__aeabi_dsub>
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	462b      	mov	r3, r5
 8003cba:	f7fc faad 	bl	8000218 <__aeabi_dmul>
 8003cbe:	a334      	add	r3, pc, #208	@ (adr r3, 8003d90 <__kernel_cos+0x168>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fbd8 	bl	8000478 <__adddf3>
 8003cc8:	4622      	mov	r2, r4
 8003cca:	462b      	mov	r3, r5
 8003ccc:	f7fc faa4 	bl	8000218 <__aeabi_dmul>
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	f7fc faa0 	bl	8000218 <__aeabi_dmul>
 8003cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cdc:	4604      	mov	r4, r0
 8003cde:	460d      	mov	r5, r1
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fa98 	bl	8000218 <__aeabi_dmul>
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4602      	mov	r2, r0
 8003cec:	4629      	mov	r1, r5
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7fc fbc0 	bl	8000474 <__aeabi_dsub>
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <__kernel_cos+0x17c>)
 8003cf6:	4598      	cmp	r8, r3
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	460f      	mov	r7, r1
 8003cfc:	d810      	bhi.n	8003d20 <__kernel_cos+0xf8>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4650      	mov	r0, sl
 8003d04:	4659      	mov	r1, fp
 8003d06:	f7fc fbb5 	bl	8000474 <__aeabi_dsub>
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4926      	ldr	r1, [pc, #152]	@ (8003da8 <__kernel_cos+0x180>)
 8003d0e:	4602      	mov	r2, r0
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fc fbaf 	bl	8000474 <__aeabi_dsub>
 8003d16:	ec41 0b10 	vmov	d0, r0, r1
 8003d1a:	b003      	add	sp, #12
 8003d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d20:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <__kernel_cos+0x184>)
 8003d22:	4921      	ldr	r1, [pc, #132]	@ (8003da8 <__kernel_cos+0x180>)
 8003d24:	4598      	cmp	r8, r3
 8003d26:	bf8c      	ite	hi
 8003d28:	4d21      	ldrhi	r5, [pc, #132]	@ (8003db0 <__kernel_cos+0x188>)
 8003d2a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003d2e:	2400      	movs	r4, #0
 8003d30:	4622      	mov	r2, r4
 8003d32:	462b      	mov	r3, r5
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fc fb9d 	bl	8000474 <__aeabi_dsub>
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	4689      	mov	r9, r1
 8003d40:	462b      	mov	r3, r5
 8003d42:	4650      	mov	r0, sl
 8003d44:	4659      	mov	r1, fp
 8003d46:	f7fc fb95 	bl	8000474 <__aeabi_dsub>
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	f7fc fb91 	bl	8000474 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	e7da      	b.n	8003d12 <__kernel_cos+0xea>
 8003d5c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003d98 <__kernel_cos+0x170>
 8003d60:	e7db      	b.n	8003d1a <__kernel_cos+0xf2>
 8003d62:	bf00      	nop
 8003d64:	f3af 8000 	nop.w
 8003d68:	be8838d4 	.word	0xbe8838d4
 8003d6c:	bda8fae9 	.word	0xbda8fae9
 8003d70:	bdb4b1c4 	.word	0xbdb4b1c4
 8003d74:	3e21ee9e 	.word	0x3e21ee9e
 8003d78:	809c52ad 	.word	0x809c52ad
 8003d7c:	3e927e4f 	.word	0x3e927e4f
 8003d80:	19cb1590 	.word	0x19cb1590
 8003d84:	3efa01a0 	.word	0x3efa01a0
 8003d88:	16c15177 	.word	0x16c15177
 8003d8c:	3f56c16c 	.word	0x3f56c16c
 8003d90:	5555554c 	.word	0x5555554c
 8003d94:	3fa55555 	.word	0x3fa55555
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	3ff00000 	.word	0x3ff00000
 8003da0:	3fe00000 	.word	0x3fe00000
 8003da4:	3fd33332 	.word	0x3fd33332
 8003da8:	3ff00000 	.word	0x3ff00000
 8003dac:	3fe90000 	.word	0x3fe90000
 8003db0:	3fd20000 	.word	0x3fd20000
 8003db4:	00000000 	.word	0x00000000

08003db8 <__kernel_sin>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	ec55 4b10 	vmov	r4, r5, d0
 8003dc0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003dca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003dce:	4680      	mov	r8, r0
 8003dd0:	d205      	bcs.n	8003dde <__kernel_sin+0x26>
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	f7fc fd8d 	bl	80008f4 <__aeabi_d2iz>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d052      	beq.n	8003e84 <__kernel_sin+0xcc>
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fa17 	bl	8000218 <__aeabi_dmul>
 8003dea:	4682      	mov	sl, r0
 8003dec:	468b      	mov	fp, r1
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fa0f 	bl	8000218 <__aeabi_dmul>
 8003dfa:	a342      	add	r3, pc, #264	@ (adr r3, 8003f04 <__kernel_sin+0x14c>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	e9cd 0100 	strd	r0, r1, [sp]
 8003e04:	4650      	mov	r0, sl
 8003e06:	4659      	mov	r1, fp
 8003e08:	f7fc fa06 	bl	8000218 <__aeabi_dmul>
 8003e0c:	a33f      	add	r3, pc, #252	@ (adr r3, 8003f0c <__kernel_sin+0x154>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc fb2f 	bl	8000474 <__aeabi_dsub>
 8003e16:	4652      	mov	r2, sl
 8003e18:	465b      	mov	r3, fp
 8003e1a:	f7fc f9fd 	bl	8000218 <__aeabi_dmul>
 8003e1e:	a33d      	add	r3, pc, #244	@ (adr r3, 8003f14 <__kernel_sin+0x15c>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fb28 	bl	8000478 <__adddf3>
 8003e28:	4652      	mov	r2, sl
 8003e2a:	465b      	mov	r3, fp
 8003e2c:	f7fc f9f4 	bl	8000218 <__aeabi_dmul>
 8003e30:	a33a      	add	r3, pc, #232	@ (adr r3, 8003f1c <__kernel_sin+0x164>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f7fc fb1d 	bl	8000474 <__aeabi_dsub>
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	465b      	mov	r3, fp
 8003e3e:	f7fc f9eb 	bl	8000218 <__aeabi_dmul>
 8003e42:	a338      	add	r3, pc, #224	@ (adr r3, 8003f24 <__kernel_sin+0x16c>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f7fc fb16 	bl	8000478 <__adddf3>
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	460f      	mov	r7, r1
 8003e50:	f1b8 0f00 	cmp.w	r8, #0
 8003e54:	d11b      	bne.n	8003e8e <__kernel_sin+0xd6>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	f7fc f9db 	bl	8000218 <__aeabi_dmul>
 8003e62:	a325      	add	r3, pc, #148	@ (adr r3, 8003ef8 <__kernel_sin+0x140>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f7fc fb04 	bl	8000474 <__aeabi_dsub>
 8003e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e70:	f7fc f9d2 	bl	8000218 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4620      	mov	r0, r4
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	f7fc fafc 	bl	8000478 <__adddf3>
 8003e80:	4604      	mov	r4, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	ec45 4b10 	vmov	d0, r4, r5
 8003e88:	b005      	add	sp, #20
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e92:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <__kernel_sin+0x148>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	f7fc f9bf 	bl	8000218 <__aeabi_dmul>
 8003e9a:	4632      	mov	r2, r6
 8003e9c:	4680      	mov	r8, r0
 8003e9e:	4689      	mov	r9, r1
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ea6:	f7fc f9b7 	bl	8000218 <__aeabi_dmul>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4640      	mov	r0, r8
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	f7fc fadf 	bl	8000474 <__aeabi_dsub>
 8003eb6:	4652      	mov	r2, sl
 8003eb8:	465b      	mov	r3, fp
 8003eba:	f7fc f9ad 	bl	8000218 <__aeabi_dmul>
 8003ebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ec2:	f7fc fad7 	bl	8000474 <__aeabi_dsub>
 8003ec6:	a30c      	add	r3, pc, #48	@ (adr r3, 8003ef8 <__kernel_sin+0x140>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ed4:	f7fc f9a0 	bl	8000218 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4630      	mov	r0, r6
 8003ede:	4639      	mov	r1, r7
 8003ee0:	f7fc faca 	bl	8000478 <__adddf3>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc fac2 	bl	8000474 <__aeabi_dsub>
 8003ef0:	e7c6      	b.n	8003e80 <__kernel_sin+0xc8>
 8003ef2:	bf00      	nop
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	55555549 	.word	0x55555549
 8003efc:	3fc55555 	.word	0x3fc55555
 8003f00:	3fe00000 	.word	0x3fe00000
 8003f04:	5acfd57c 	.word	0x5acfd57c
 8003f08:	3de5d93a 	.word	0x3de5d93a
 8003f0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003f10:	3e5ae5e6 	.word	0x3e5ae5e6
 8003f14:	57b1fe7d 	.word	0x57b1fe7d
 8003f18:	3ec71de3 	.word	0x3ec71de3
 8003f1c:	19c161d5 	.word	0x19c161d5
 8003f20:	3f2a01a0 	.word	0x3f2a01a0
 8003f24:	1110f8a6 	.word	0x1110f8a6
 8003f28:	3f811111 	.word	0x3f811111

08003f2c <fabs>:
 8003f2c:	ec51 0b10 	vmov	r0, r1, d0
 8003f30:	4602      	mov	r2, r0
 8003f32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003f36:	ec43 2b10 	vmov	d0, r2, r3
 8003f3a:	4770      	bx	lr
 8003f3c:	0000      	movs	r0, r0
	...

08003f40 <scalbn>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	ec55 4b10 	vmov	r4, r5, d0
 8003f46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	b991      	cbnz	r1, 8003f76 <scalbn+0x36>
 8003f50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003f54:	4323      	orrs	r3, r4
 8003f56:	d03b      	beq.n	8003fd0 <scalbn+0x90>
 8003f58:	4b33      	ldr	r3, [pc, #204]	@ (8004028 <scalbn+0xe8>)
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f7fc f95a 	bl	8000218 <__aeabi_dmul>
 8003f64:	4b31      	ldr	r3, [pc, #196]	@ (800402c <scalbn+0xec>)
 8003f66:	429e      	cmp	r6, r3
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	da0f      	bge.n	8003f8e <scalbn+0x4e>
 8003f6e:	a326      	add	r3, pc, #152	@ (adr r3, 8004008 <scalbn+0xc8>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	e01e      	b.n	8003fb4 <scalbn+0x74>
 8003f76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	d10b      	bne.n	8003f96 <scalbn+0x56>
 8003f7e:	4622      	mov	r2, r4
 8003f80:	4620      	mov	r0, r4
 8003f82:	4629      	mov	r1, r5
 8003f84:	f7fc fa78 	bl	8000478 <__adddf3>
 8003f88:	4604      	mov	r4, r0
 8003f8a:	460d      	mov	r5, r1
 8003f8c:	e020      	b.n	8003fd0 <scalbn+0x90>
 8003f8e:	460b      	mov	r3, r1
 8003f90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003f94:	3936      	subs	r1, #54	@ 0x36
 8003f96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003f9a:	4296      	cmp	r6, r2
 8003f9c:	dd0d      	ble.n	8003fba <scalbn+0x7a>
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	a11b      	add	r1, pc, #108	@ (adr r1, 8004010 <scalbn+0xd0>)
 8003fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa6:	da02      	bge.n	8003fae <scalbn+0x6e>
 8003fa8:	a11b      	add	r1, pc, #108	@ (adr r1, 8004018 <scalbn+0xd8>)
 8003faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fae:	a318      	add	r3, pc, #96	@ (adr r3, 8004010 <scalbn+0xd0>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc f930 	bl	8000218 <__aeabi_dmul>
 8003fb8:	e7e6      	b.n	8003f88 <scalbn+0x48>
 8003fba:	1872      	adds	r2, r6, r1
 8003fbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003fc0:	428a      	cmp	r2, r1
 8003fc2:	dcec      	bgt.n	8003f9e <scalbn+0x5e>
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	dd06      	ble.n	8003fd6 <scalbn+0x96>
 8003fc8:	f36f 531e 	bfc	r3, #20, #11
 8003fcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003fd0:	ec45 4b10 	vmov	d0, r4, r5
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
 8003fd6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003fda:	da08      	bge.n	8003fee <scalbn+0xae>
 8003fdc:	2d00      	cmp	r5, #0
 8003fde:	a10a      	add	r1, pc, #40	@ (adr r1, 8004008 <scalbn+0xc8>)
 8003fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fe4:	dac3      	bge.n	8003f6e <scalbn+0x2e>
 8003fe6:	a10e      	add	r1, pc, #56	@ (adr r1, 8004020 <scalbn+0xe0>)
 8003fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fec:	e7bf      	b.n	8003f6e <scalbn+0x2e>
 8003fee:	3236      	adds	r2, #54	@ 0x36
 8003ff0:	f36f 531e 	bfc	r3, #20, #11
 8003ff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <scalbn+0xf0>)
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	2200      	movs	r2, #0
 8004000:	e7d8      	b.n	8003fb4 <scalbn+0x74>
 8004002:	bf00      	nop
 8004004:	f3af 8000 	nop.w
 8004008:	c2f8f359 	.word	0xc2f8f359
 800400c:	01a56e1f 	.word	0x01a56e1f
 8004010:	8800759c 	.word	0x8800759c
 8004014:	7e37e43c 	.word	0x7e37e43c
 8004018:	8800759c 	.word	0x8800759c
 800401c:	fe37e43c 	.word	0xfe37e43c
 8004020:	c2f8f359 	.word	0xc2f8f359
 8004024:	81a56e1f 	.word	0x81a56e1f
 8004028:	43500000 	.word	0x43500000
 800402c:	ffff3cb0 	.word	0xffff3cb0
 8004030:	3c900000 	.word	0x3c900000
 8004034:	00000000 	.word	0x00000000

08004038 <floor>:
 8004038:	ec51 0b10 	vmov	r0, r1, d0
 800403c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004048:	2e13      	cmp	r6, #19
 800404a:	460c      	mov	r4, r1
 800404c:	4605      	mov	r5, r0
 800404e:	4680      	mov	r8, r0
 8004050:	dc34      	bgt.n	80040bc <floor+0x84>
 8004052:	2e00      	cmp	r6, #0
 8004054:	da17      	bge.n	8004086 <floor+0x4e>
 8004056:	a332      	add	r3, pc, #200	@ (adr r3, 8004120 <floor+0xe8>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc fa0c 	bl	8000478 <__adddf3>
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	f7fc fc3c 	bl	80008e0 <__aeabi_dcmpgt>
 8004068:	b150      	cbz	r0, 8004080 <floor+0x48>
 800406a:	2c00      	cmp	r4, #0
 800406c:	da55      	bge.n	800411a <floor+0xe2>
 800406e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004072:	432c      	orrs	r4, r5
 8004074:	2500      	movs	r5, #0
 8004076:	42ac      	cmp	r4, r5
 8004078:	4c2b      	ldr	r4, [pc, #172]	@ (8004128 <floor+0xf0>)
 800407a:	bf08      	it	eq
 800407c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004080:	4621      	mov	r1, r4
 8004082:	4628      	mov	r0, r5
 8004084:	e023      	b.n	80040ce <floor+0x96>
 8004086:	4f29      	ldr	r7, [pc, #164]	@ (800412c <floor+0xf4>)
 8004088:	4137      	asrs	r7, r6
 800408a:	ea01 0307 	and.w	r3, r1, r7
 800408e:	4303      	orrs	r3, r0
 8004090:	d01d      	beq.n	80040ce <floor+0x96>
 8004092:	a323      	add	r3, pc, #140	@ (adr r3, 8004120 <floor+0xe8>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc f9ee 	bl	8000478 <__adddf3>
 800409c:	2200      	movs	r2, #0
 800409e:	2300      	movs	r3, #0
 80040a0:	f7fc fc1e 	bl	80008e0 <__aeabi_dcmpgt>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d0eb      	beq.n	8004080 <floor+0x48>
 80040a8:	2c00      	cmp	r4, #0
 80040aa:	bfbe      	ittt	lt
 80040ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80040b0:	4133      	asrlt	r3, r6
 80040b2:	18e4      	addlt	r4, r4, r3
 80040b4:	ea24 0407 	bic.w	r4, r4, r7
 80040b8:	2500      	movs	r5, #0
 80040ba:	e7e1      	b.n	8004080 <floor+0x48>
 80040bc:	2e33      	cmp	r6, #51	@ 0x33
 80040be:	dd0a      	ble.n	80040d6 <floor+0x9e>
 80040c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80040c4:	d103      	bne.n	80040ce <floor+0x96>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	f7fc f9d5 	bl	8000478 <__adddf3>
 80040ce:	ec41 0b10 	vmov	d0, r0, r1
 80040d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80040da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80040de:	40df      	lsrs	r7, r3
 80040e0:	4207      	tst	r7, r0
 80040e2:	d0f4      	beq.n	80040ce <floor+0x96>
 80040e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004120 <floor+0xe8>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f9c5 	bl	8000478 <__adddf3>
 80040ee:	2200      	movs	r2, #0
 80040f0:	2300      	movs	r3, #0
 80040f2:	f7fc fbf5 	bl	80008e0 <__aeabi_dcmpgt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d0c2      	beq.n	8004080 <floor+0x48>
 80040fa:	2c00      	cmp	r4, #0
 80040fc:	da0a      	bge.n	8004114 <floor+0xdc>
 80040fe:	2e14      	cmp	r6, #20
 8004100:	d101      	bne.n	8004106 <floor+0xce>
 8004102:	3401      	adds	r4, #1
 8004104:	e006      	b.n	8004114 <floor+0xdc>
 8004106:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800410a:	2301      	movs	r3, #1
 800410c:	40b3      	lsls	r3, r6
 800410e:	441d      	add	r5, r3
 8004110:	4545      	cmp	r5, r8
 8004112:	d3f6      	bcc.n	8004102 <floor+0xca>
 8004114:	ea25 0507 	bic.w	r5, r5, r7
 8004118:	e7b2      	b.n	8004080 <floor+0x48>
 800411a:	2500      	movs	r5, #0
 800411c:	462c      	mov	r4, r5
 800411e:	e7af      	b.n	8004080 <floor+0x48>
 8004120:	8800759c 	.word	0x8800759c
 8004124:	7e37e43c 	.word	0x7e37e43c
 8004128:	bff00000 	.word	0xbff00000
 800412c:	000fffff 	.word	0x000fffff

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
